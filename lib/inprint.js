"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleFile = handleFile;
exports.callEmbeddedFeatures = callEmbeddedFeatures;
exports.doInprint = doInprint;
exports.run = run;
exports.writeFileSyncIfChanged = exports.usageNotice = exports.endPrefix = exports.startPrefix = exports.inprint_prefix = void 0;

var _json = _interopRequireDefault(require("json5"));

var _globby = _interopRequireDefault(require("globby"));

var _fs = require("fs");

var _path = require("path");

var _embeddedFeatures = require("./embeddedFeatures");

var _InprintOptions = require("./InprintOptions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const inprint_prefix = "@" + "INPRINT";
exports.inprint_prefix = inprint_prefix;
const startPrefix = "_START";
exports.startPrefix = startPrefix;
const endPrefix = "_END";
exports.endPrefix = endPrefix;
const usageNotice = `
USAGE:

// ${inprint_prefix}_START {...any_json_params...}
// Generated code will go here
// ${inprint_prefix}_END
`;
exports.usageNotice = usageNotice;

const writeFileSyncIfChanged = (fileName, content) => {
  let current;

  try {
    current = (0, _fs.readFileSync)(fileName, "utf-8");
  } catch (e) {}

  if (current !== content) {
    (0, _fs.writeFileSync)(fileName, content, "utf-8");
    return true;
  }

  return false;
};

exports.writeFileSyncIfChanged = writeFileSyncIfChanged;

function handleFile(filePath, options) {
  const contentStr = (0, _fs.readFileSync)(filePath, "utf-8");
  if (!contentStr.includes(inprint_prefix)) return false;
  const [fileHeader, ...parts0] = contentStr.split(inprint_prefix);
  const parts = [];

  for (let i = 0; i < parts0.length; i += 2) {
    const s = parts0[i];

    if (!s.startsWith(startPrefix)) {
      console.error(`CODE00000001 INPRINT_ERROR No ${inprint_prefix}${startPrefix} in ${filePath}`);
      return false;
    }

    if (!parts0[i + 1].startsWith(endPrefix)) {
      console.error(`CODE00000002 INPRINT_ERROR No ${inprint_prefix}${endPrefix} in ${filePath}`);
    }

    try {
      const [header, ...middleParts] = s.split("\n");
      const lastPart = middleParts.pop();
      const paramsStr = header.substr(startPrefix.length).trim();
      const middle = middleParts.join("\n");
      const tail = lastPart + inprint_prefix + parts0[i + 1];

      const params = _objectSpread({
        content: middle,
        absolutePath: filePath
      }, _json.default.parse(paramsStr));

      parts.push({
        header,
        params,
        middle,
        tail,
        newMiddle: ""
      });
    } catch (e) {
      console.error(`CODE00000003 INPRINT_ERROR ${e.message} in ${filePath}`);
      return false;
    }
  }

  for (let part of parts) {
    try {
      part.newMiddle = doInprint(part.params, options);
    } catch (e) {
      part.newMiddle = `// INPRINT_FAILED because of exception:\n${e.message || "NO_ERROR_MESSAGE"}\\n${e.stack || "NO_STACK_TRACE"}`.split("\n").join("\n//     ");
    }
  }

  const newContent = fileHeader + inprint_prefix + parts.map(p => `${p.header}\n${p.newMiddle}\n${p.tail}`).join(inprint_prefix);
  writeFileSyncIfChanged(filePath, newContent);
  return true;
}

function callEmbeddedFeatures(params, options) {
  for (let embeddedFeature of _embeddedFeatures.embeddedFeatures) {
    const r = embeddedFeature.func(params, options);
    if (r) return r;
  }

  return undefined;
}

function doInprint(params, options) {
  if (options.embeddedFeatures === "first" || options.embeddedFeatures === true) {
    const r = callEmbeddedFeatures(params, options);
    if (r) return r;
  }

  if (options.inprint) {
    const r = options.inprint(params, options);
    if (r) return r;
  }

  if (options.embeddedFeatures === "last") {
    const r = callEmbeddedFeatures(params, options);
    if (r) return r;
  }

  return `// INPRINT_ERROR None of inprint functions returned a result. They all returned undefined!`;
} // const testFilePath = `D:\\b\\Mine\\GIT_Work\\yatasks_one_api\\src\\inprintTestFile.ts`;
// handleFile(testFilePath);


function run(options0) {
  if (process.argv[2] === "--version" || process.argv[2] === "-v") {
    // @ts-ignore
    console.log("1.0.15");
    return;
  }

  let optionsPath = undefined;

  try {
    if (!options0) {
      optionsPath = process.argv[2];
      options0 = require(optionsPath);
    }
  } catch (e) {}

  try {
    if (!options0) {
      optionsPath = (0, _path.resolve)(process.cwd(), "inprint.cjs");
      options0 = require(optionsPath);
    }
  } catch (e) {}

  try {
    if (!options0) {
      optionsPath = (0, _path.resolve)(process.cwd(), "inprint.js");
      options0 = require(optionsPath);
    }
  } catch (e) {}

  if (!options0) {
    console.error(`CODE00000004 INPRINT_ERROR Couldn't find options file. Create inprint.cjs or specify path to options in command line argument`);
  } else {
    const options = _objectSpread(_objectSpread({}, _InprintOptions.defaultInprintOptions), options0);

    if (!options.inprint) {
      console.error(`CODE00000012 INPRINT_ERROR no 'inprint' function specified!`);
      return;
    }

    let processedCount = 0;

    (async () => {
      if (options.logging) console.log(`CODE00000005 INPRINT options from ${optionsPath}`);
      const paths = await (0, _globby.default)(options.files);

      for (let filePath of paths) {
        if (options.logging === "files") console.log(`CODE00000006 INPRINT ${filePath}`);
        if (filePath.includes("node_modules") && options.skipNodeModules) continue;
        if (handleFile(filePath, options)) processedCount++;
      }

      if (options.logging) console.log(`CODE00000007 INPRINT finished, ${paths.length} - total files, ${processedCount} - processed, ${paths.length - processedCount} - skipped`);
    })();
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbnByaW50LnRzIl0sIm5hbWVzIjpbImlucHJpbnRfcHJlZml4Iiwic3RhcnRQcmVmaXgiLCJlbmRQcmVmaXgiLCJ1c2FnZU5vdGljZSIsIndyaXRlRmlsZVN5bmNJZkNoYW5nZWQiLCJmaWxlTmFtZSIsImNvbnRlbnQiLCJjdXJyZW50IiwiZSIsImhhbmRsZUZpbGUiLCJmaWxlUGF0aCIsIm9wdGlvbnMiLCJjb250ZW50U3RyIiwiaW5jbHVkZXMiLCJmaWxlSGVhZGVyIiwicGFydHMwIiwic3BsaXQiLCJwYXJ0cyIsImkiLCJsZW5ndGgiLCJzIiwic3RhcnRzV2l0aCIsImNvbnNvbGUiLCJlcnJvciIsImhlYWRlciIsIm1pZGRsZVBhcnRzIiwibGFzdFBhcnQiLCJwb3AiLCJwYXJhbXNTdHIiLCJzdWJzdHIiLCJ0cmltIiwibWlkZGxlIiwiam9pbiIsInRhaWwiLCJwYXJhbXMiLCJhYnNvbHV0ZVBhdGgiLCJKU09ONSIsInBhcnNlIiwicHVzaCIsIm5ld01pZGRsZSIsIm1lc3NhZ2UiLCJwYXJ0IiwiZG9JbnByaW50Iiwic3RhY2siLCJuZXdDb250ZW50IiwibWFwIiwicCIsImNhbGxFbWJlZGRlZEZlYXR1cmVzIiwiZW1iZWRkZWRGZWF0dXJlIiwiZW1iZWRkZWRGZWF0dXJlcyIsInIiLCJmdW5jIiwidW5kZWZpbmVkIiwiaW5wcmludCIsInJ1biIsIm9wdGlvbnMwIiwicHJvY2VzcyIsImFyZ3YiLCJsb2ciLCJvcHRpb25zUGF0aCIsInJlcXVpcmUiLCJjd2QiLCJkZWZhdWx0SW5wcmludE9wdGlvbnMiLCJwcm9jZXNzZWRDb3VudCIsImxvZ2dpbmciLCJwYXRocyIsImZpbGVzIiwic2tpcE5vZGVNb2R1bGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7Ozs7O0FBRU8sTUFBTUEsY0FBYyxHQUFHLE1BQU0sU0FBN0I7O0FBQ0EsTUFBTUMsV0FBVyxHQUFHLFFBQXBC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dEQsT0FBTyxDQUFDcUQsT0FBUixLQUFvQixPQUF4QixFQUFpQzFDLE9BQU8sQ0FBQ29DLEdBQVIsQ0FBYSx3QkFBdUJoRCxRQUFTLEVBQTdDO0FBQ2pDLFlBQUlBLFFBQVEsQ0FBQ0csUUFBVCxDQUFrQixjQUFsQixLQUFxQ0YsT0FBTyxDQUFDd0QsZUFBakQsRUFBa0U7QUFDbEUsWUFBSTFELFVBQVUsQ0FBQ0MsUUFBRCxFQUFXQyxPQUFYLENBQWQsRUFBbUNvRCxjQUFjO0FBQ3BEOztBQUNELFVBQUlwRCxPQUFPLENBQUNxRCxPQUFaLEVBQ0kxQyxPQUFPLENBQUNvQyxHQUFSLENBQ0ssa0NBQWlDTyxLQUFLLENBQUM5QyxNQUFPLG1CQUFrQjRDLGNBQWUsaUJBQzVFRSxLQUFLLENBQUM5QyxNQUFOLEdBQWU0QyxjQUNsQixZQUhMO0FBS1AsS0FmRDtBQWdCSDtBQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT041IGZyb20gXCJqc29uNVwiO1xuaW1wb3J0IGdsb2JieSBmcm9tIFwiZ2xvYmJ5XCI7XG5pbXBvcnQgeyByZWFkRmlsZVN5bmMsIHdyaXRlRmlsZVN5bmMgfSBmcm9tIFwiZnNcIjtcbmltcG9ydCB7IHJlc29sdmUgfSBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgZW1iZWRkZWRGZWF0dXJlcyB9IGZyb20gXCIuL2VtYmVkZGVkRmVhdHVyZXNcIjtcbmltcG9ydCB7IGRlZmF1bHRJbnByaW50T3B0aW9ucywgSW5wcmludE9wdGlvbnMgfSBmcm9tIFwiLi9JbnByaW50T3B0aW9uc1wiO1xuXG5leHBvcnQgY29uc3QgaW5wcmludF9wcmVmaXggPSBcIkBcIiArIFwiSU5QUklOVFwiO1xuZXhwb3J0IGNvbnN0IHN0YXJ0UHJlZml4ID0gXCJfU1RBUlRcIjtcbmV4cG9ydCBjb25zdCBlbmRQcmVmaXggPSBcIl9FTkRcIjtcbmV4cG9ydCBjb25zdCB1c2FnZU5vdGljZSA9IGBcblVTQUdFOlxuXG4vLyAke2lucHJpbnRfcHJlZml4fV9TVEFSVCB7Li4uYW55X2pzb25fcGFyYW1zLi4ufVxuLy8gR2VuZXJhdGVkIGNvZGUgd2lsbCBnbyBoZXJlXG4vLyAke2lucHJpbnRfcHJlZml4fV9FTkRcbmA7XG5cbmludGVyZmFjZSBJbnByaW50RmlsZVBhcnQge1xuICAgIGhlYWRlcjogc3RyaW5nO1xuICAgIHBhcmFtczogYW55O1xuICAgIG1pZGRsZTogc3RyaW5nO1xuICAgIHRhaWw6IHN0cmluZztcbiAgICBuZXdNaWRkbGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IHdyaXRlRmlsZVN5bmNJZkNoYW5nZWQgPSAoZmlsZU5hbWU6IHN0cmluZywgY29udGVudDogc3RyaW5nKSA9PiB7XG4gICAgbGV0IGN1cnJlbnQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICB0cnkge1xuICAgICAgICBjdXJyZW50ID0gcmVhZEZpbGVTeW5jKGZpbGVOYW1lLCBcInV0Zi04XCIpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICBpZiAoY3VycmVudCAhPT0gY29udGVudCkge1xuICAgICAgICB3cml0ZUZpbGVTeW5jKGZpbGVOYW1lLCBjb250ZW50LCBcInV0Zi04XCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUZpbGUoZmlsZVBhdGg6IHN0cmluZywgb3B0aW9uczogSW5wcmludE9wdGlvbnMpOiBib29sZWFuIHtcbiAgICBjb25zdCBjb250ZW50U3RyID0gcmVhZEZpbGVTeW5jKGZpbGVQYXRoLCBcInV0Zi04XCIpO1xuXG4gICAgaWYgKCFjb250ZW50U3RyLmluY2x1ZGVzKGlucHJpbnRfcHJlZml4KSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgY29uc3QgW2ZpbGVIZWFkZXIsIC4uLnBhcnRzMF0gPSBjb250ZW50U3RyLnNwbGl0KGlucHJpbnRfcHJlZml4KTtcbiAgICBjb25zdCBwYXJ0czogSW5wcmludEZpbGVQYXJ0W10gPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzMC5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICBjb25zdCBzID0gcGFydHMwW2ldO1xuICAgICAgICBpZiAoIXMuc3RhcnRzV2l0aChzdGFydFByZWZpeCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYENPREUwMDAwMDAwMSBJTlBSSU5UX0VSUk9SIE5vICR7aW5wcmludF9wcmVmaXh9JHtzdGFydFByZWZpeH0gaW4gJHtmaWxlUGF0aH1gKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcGFydHMwW2kgKyAxXS5zdGFydHNXaXRoKGVuZFByZWZpeCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYENPREUwMDAwMDAwMiBJTlBSSU5UX0VSUk9SIE5vICR7aW5wcmludF9wcmVmaXh9JHtlbmRQcmVmaXh9IGluICR7ZmlsZVBhdGh9YCk7XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgW2hlYWRlciwgLi4ubWlkZGxlUGFydHNdID0gcy5zcGxpdChcIlxcblwiKTtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RQYXJ0ID0gbWlkZGxlUGFydHMucG9wKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHBhcmFtc1N0ciA9IGhlYWRlci5zdWJzdHIoc3RhcnRQcmVmaXgubGVuZ3RoKS50cmltKCk7XG4gICAgICAgICAgICBjb25zdCBtaWRkbGUgPSBtaWRkbGVQYXJ0cy5qb2luKFwiXFxuXCIpO1xuICAgICAgICAgICAgY29uc3QgdGFpbCA9IGxhc3RQYXJ0ICsgaW5wcmludF9wcmVmaXggKyBwYXJ0czBbaSArIDFdO1xuXG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgY29udGVudDogbWlkZGxlLFxuICAgICAgICAgICAgICAgIGFic29sdXRlUGF0aDogZmlsZVBhdGgsXG4gICAgICAgICAgICAgICAgLi4uSlNPTjUucGFyc2UocGFyYW1zU3RyKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKHsgaGVhZGVyLCBwYXJhbXMsIG1pZGRsZSwgdGFpbCwgbmV3TWlkZGxlOiBcIlwiIH0pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBDT0RFMDAwMDAwMDMgSU5QUklOVF9FUlJPUiAke2UubWVzc2FnZX0gaW4gJHtmaWxlUGF0aH1gKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IHBhcnQgb2YgcGFydHMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHBhcnQubmV3TWlkZGxlID0gZG9JbnByaW50KHBhcnQucGFyYW1zLCBvcHRpb25zKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcGFydC5uZXdNaWRkbGUgPSBgLy8gSU5QUklOVF9GQUlMRUQgYmVjYXVzZSBvZiBleGNlcHRpb246XFxuJHtlLm1lc3NhZ2UgfHwgXCJOT19FUlJPUl9NRVNTQUdFXCJ9XFxcXG4ke1xuICAgICAgICAgICAgICAgIGUuc3RhY2sgfHwgXCJOT19TVEFDS19UUkFDRVwiXG4gICAgICAgICAgICB9YFxuICAgICAgICAgICAgICAgIC5zcGxpdChcIlxcblwiKVxuICAgICAgICAgICAgICAgIC5qb2luKFwiXFxuLy8gICAgIFwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG5ld0NvbnRlbnQgPVxuICAgICAgICBmaWxlSGVhZGVyICsgaW5wcmludF9wcmVmaXggKyBwYXJ0cy5tYXAoKHApID0+IGAke3AuaGVhZGVyfVxcbiR7cC5uZXdNaWRkbGV9XFxuJHtwLnRhaWx9YCkuam9pbihpbnByaW50X3ByZWZpeCk7XG4gICAgd3JpdGVGaWxlU3luY0lmQ2hhbmdlZChmaWxlUGF0aCwgbmV3Q29udGVudCk7XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxsRW1iZWRkZWRGZWF0dXJlcyhwYXJhbXM6IGFueSwgb3B0aW9uczogSW5wcmludE9wdGlvbnMpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGZvciAobGV0IGVtYmVkZGVkRmVhdHVyZSBvZiBlbWJlZGRlZEZlYXR1cmVzKSB7XG4gICAgICAgIGNvbnN0IHIgPSBlbWJlZGRlZEZlYXR1cmUuZnVuYyhwYXJhbXMsIG9wdGlvbnMpO1xuICAgICAgICBpZiAocikgcmV0dXJuIHI7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkb0lucHJpbnQocGFyYW1zOiBhbnksIG9wdGlvbnM6IElucHJpbnRPcHRpb25zKTogc3RyaW5nIHtcbiAgICBpZiAob3B0aW9ucy5lbWJlZGRlZEZlYXR1cmVzID09PSBcImZpcnN0XCIgfHwgb3B0aW9ucy5lbWJlZGRlZEZlYXR1cmVzID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IHIgPSBjYWxsRW1iZWRkZWRGZWF0dXJlcyhwYXJhbXMsIG9wdGlvbnMpO1xuICAgICAgICBpZiAocikgcmV0dXJuIHI7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaW5wcmludCkge1xuICAgICAgICBjb25zdCByID0gb3B0aW9ucy5pbnByaW50KHBhcmFtcywgb3B0aW9ucyk7XG4gICAgICAgIGlmIChyKSByZXR1cm4gcjtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5lbWJlZGRlZEZlYXR1cmVzID09PSBcImxhc3RcIikge1xuICAgICAgICBjb25zdCByID0gY2FsbEVtYmVkZGVkRmVhdHVyZXMocGFyYW1zLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKHIpIHJldHVybiByO1xuICAgIH1cbiAgICByZXR1cm4gYC8vIElOUFJJTlRfRVJST1IgTm9uZSBvZiBpbnByaW50IGZ1bmN0aW9ucyByZXR1cm5lZCBhIHJlc3VsdC4gVGhleSBhbGwgcmV0dXJuZWQgdW5kZWZpbmVkIWA7XG59XG5cbi8vIGNvbnN0IHRlc3RGaWxlUGF0aCA9IGBEOlxcXFxiXFxcXE1pbmVcXFxcR0lUX1dvcmtcXFxceWF0YXNrc19vbmVfYXBpXFxcXHNyY1xcXFxpbnByaW50VGVzdEZpbGUudHNgO1xuLy8gaGFuZGxlRmlsZSh0ZXN0RmlsZVBhdGgpO1xuXG5leHBvcnQgZnVuY3Rpb24gcnVuKG9wdGlvbnMwPzogSW5wcmludE9wdGlvbnMgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAocHJvY2Vzcy5hcmd2WzJdID09PSBcIi0tdmVyc2lvblwiIHx8IHByb2Nlc3MuYXJndlsyXSA9PT0gXCItdlwiKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc29sZS5sb2coX19WRVJTSU9OX18pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IG9wdGlvbnNQYXRoOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCFvcHRpb25zMCkge1xuICAgICAgICAgICAgb3B0aW9uc1BhdGggPSBwcm9jZXNzLmFyZ3ZbMl07XG4gICAgICAgICAgICBvcHRpb25zMCA9IHJlcXVpcmUob3B0aW9uc1BhdGgpO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIHRyeSB7XG4gICAgICAgIGlmICghb3B0aW9uczApIHtcbiAgICAgICAgICAgIG9wdGlvbnNQYXRoID0gcmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBcImlucHJpbnQuY2pzXCIpO1xuICAgICAgICAgICAgb3B0aW9uczAgPSByZXF1aXJlKG9wdGlvbnNQYXRoKTtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICB0cnkge1xuICAgICAgICBpZiAoIW9wdGlvbnMwKSB7XG4gICAgICAgICAgICBvcHRpb25zUGF0aCA9IHJlc29sdmUocHJvY2Vzcy5jd2QoKSwgXCJpbnByaW50LmpzXCIpO1xuICAgICAgICAgICAgb3B0aW9uczAgPSByZXF1aXJlKG9wdGlvbnNQYXRoKTtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICBpZiAoIW9wdGlvbnMwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBgQ09ERTAwMDAwMDA0IElOUFJJTlRfRVJST1IgQ291bGRuJ3QgZmluZCBvcHRpb25zIGZpbGUuIENyZWF0ZSBpbnByaW50LmNqcyBvciBzcGVjaWZ5IHBhdGggdG8gb3B0aW9ucyBpbiBjb21tYW5kIGxpbmUgYXJndW1lbnRgXG4gICAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uczogSW5wcmludE9wdGlvbnMgPSB7IC4uLmRlZmF1bHRJbnByaW50T3B0aW9ucywgLi4ub3B0aW9uczAgfTtcbiAgICAgICAgaWYgKCFvcHRpb25zLmlucHJpbnQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYENPREUwMDAwMDAxMiBJTlBSSU5UX0VSUk9SIG5vICdpbnByaW50JyBmdW5jdGlvbiBzcGVjaWZpZWQhYCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcHJvY2Vzc2VkQ291bnQgPSAwO1xuICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubG9nZ2luZykgY29uc29sZS5sb2coYENPREUwMDAwMDAwNSBJTlBSSU5UIG9wdGlvbnMgZnJvbSAke29wdGlvbnNQYXRofWApO1xuICAgICAgICAgICAgY29uc3QgcGF0aHMgPSBhd2FpdCBnbG9iYnkob3B0aW9ucy5maWxlcyk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGZpbGVQYXRoIG9mIHBhdGhzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubG9nZ2luZyA9PT0gXCJmaWxlc1wiKSBjb25zb2xlLmxvZyhgQ09ERTAwMDAwMDA2IElOUFJJTlQgJHtmaWxlUGF0aH1gKTtcbiAgICAgICAgICAgICAgICBpZiAoZmlsZVBhdGguaW5jbHVkZXMoXCJub2RlX21vZHVsZXNcIikgJiYgb3B0aW9ucy5za2lwTm9kZU1vZHVsZXMpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVGaWxlKGZpbGVQYXRoLCBvcHRpb25zKSkgcHJvY2Vzc2VkQ291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmxvZ2dpbmcpXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgICAgIGBDT0RFMDAwMDAwMDcgSU5QUklOVCBmaW5pc2hlZCwgJHtwYXRocy5sZW5ndGh9IC0gdG90YWwgZmlsZXMsICR7cHJvY2Vzc2VkQ291bnR9IC0gcHJvY2Vzc2VkLCAke1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aHMubGVuZ3RoIC0gcHJvY2Vzc2VkQ291bnRcbiAgICAgICAgICAgICAgICAgICAgfSAtIHNraXBwZWRgXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgfSkoKTtcbiAgICB9XG59XG4iXX0=