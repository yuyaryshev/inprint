"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleFile = handleFile;
exports.callEmbeddedFeatures = callEmbeddedFeatures;
exports.doInprint = doInprint;
exports.run = run;
exports.writeFileSyncIfChanged = exports.usageNotice = exports.endPrefix = exports.startPrefix = exports.inprint_prefix = void 0;

var _json = _interopRequireDefault(require("json5"));

var _globby = _interopRequireDefault(require("globby"));

var _fs = require("fs");

var _path = require("path");

var _embeddedFeatures = require("./embeddedFeatures");

var _InprintOptions = require("./InprintOptions");

var _formatTypescript = require("./formatTypescript");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const inprint_prefix = "@" + "INPRINT";
exports.inprint_prefix = inprint_prefix;
const startPrefix = "_START";
exports.startPrefix = startPrefix;
const endPrefix = "_END";
exports.endPrefix = endPrefix;
const usageNotice = `
USAGE:

// ${inprint_prefix}_START {...any_json_params...}
// Generated code will go here
// ${inprint_prefix}_END
`;
exports.usageNotice = usageNotice;

const writeFileSyncIfChanged = (fileName, content) => {
  let current;

  try {
    current = (0, _fs.readFileSync)(fileName, "utf-8");
  } catch (e) {}

  if (current !== content) {
    (0, _fs.writeFileSync)(fileName, content, "utf-8");
    return true;
  }

  return false;
};

exports.writeFileSyncIfChanged = writeFileSyncIfChanged;

function handleFile(filePath, options) {
  const contentStr = (0, _fs.readFileSync)(filePath, "utf-8");
  if (!contentStr.includes(inprint_prefix)) return false;
  const [fileHeader, ...parts0] = contentStr.split(inprint_prefix);
  const parts = [];

  for (let i = 0; i < parts0.length; i += 2) {
    const s = parts0[i];

    if (!s.startsWith(startPrefix)) {
      console.error(`CODE00000001 INPRINT_ERROR No ${inprint_prefix}${startPrefix} in ${filePath}`);
      return false;
    }

    if (!parts0[i + 1].startsWith(endPrefix)) {
      console.error(`CODE00000002 INPRINT_ERROR No ${inprint_prefix}${endPrefix} in ${filePath}`);
    }

    try {
      const [header, ...middleParts] = s.split("\n");
      const lastPart = middleParts.pop();
      const paramsStr = header.substr(startPrefix.length).trim();
      const middle = middleParts.join("\n");
      const tail = lastPart + inprint_prefix + parts0[i + 1];

      const params = _objectSpread({
        content: middle,
        absolutePath: filePath
      }, _json.default.parse(paramsStr));

      parts.push({
        header,
        params,
        middle,
        tail,
        newMiddle: ""
      });
    } catch (e) {
      console.error(`CODE00000003 INPRINT_ERROR ${e.message} in ${filePath}`);
      return false;
    }
  }

  for (let part of parts) {
    try {
      part.newMiddle = (0, _formatTypescript.formatTypescript)(doInprint(part.params, options), options.prettierOpts);
    } catch (e) {
      part.newMiddle = `// INPRINT_FAILED because of exception:\n${e.message || "NO_ERROR_MESSAGE"}\\n${e.stack || "NO_STACK_TRACE"}`.split("\n").join("\n//     ");
    }
  }

  const newContent = fileHeader + inprint_prefix + parts.map(p => `${p.header}\n${p.newMiddle}\n${p.tail}`).join(inprint_prefix);
  writeFileSyncIfChanged(filePath, newContent);
  return true;
}

function callEmbeddedFeatures(params, options) {
  for (let embeddedFeature of _embeddedFeatures.embeddedFeatures) {
    const r = embeddedFeature.func(params, options);
    if (r) return r;
  }

  return undefined;
}

function doInprint(params, options) {
  if (options.embeddedFeatures === "first" || options.embeddedFeatures === true) {
    const r = callEmbeddedFeatures(params, options);
    if (r) return r;
  }

  if (options.inprint) {
    const r = options.inprint(params, options);
    if (r) return r;
  }

  if (options.embeddedFeatures === "last") {
    const r = callEmbeddedFeatures(params, options);
    if (r) return r;
  }

  return `// INPRINT_ERROR None of inprint functions returned a result. They all returned undefined!`;
} // const testFilePath = `D:\\b\\Mine\\GIT_Work\\yatasks_one_api\\src\\inprintTestFile.ts`;
// handleFile(testFilePath);


function run(options0) {
  if (process.argv[2] === "--version" || process.argv[2] === "-v") {
    // @ts-ignore
    console.log("1.0.18");
    return;
  }

  let optionsPath = undefined;

  try {
    if (!options0) {
      optionsPath = process.argv[2];
      options0 = require(optionsPath);
    }
  } catch (e) {}

  try {
    if (!options0) {
      optionsPath = (0, _path.resolve)(process.cwd(), "inprint.cjs");
      options0 = require(optionsPath);
    }
  } catch (e) {}

  try {
    if (!options0) {
      optionsPath = (0, _path.resolve)(process.cwd(), "inprint.js");
      options0 = require(optionsPath);
    }
  } catch (e) {}

  const options = _objectSpread(_objectSpread({}, _InprintOptions.defaultInprintOptions), options0);

  let processedCount = 0;

  (async () => {
    if (options.logging) console.log(`CODE00000005 INPRINT options from ${optionsPath}`);
    const paths = await (0, _globby.default)(options.files);

    for (let filePath of paths) {
      if (options.logging === "files") console.log(`CODE00000006 INPRINT ${filePath}`);
      if (filePath.includes("node_modules") && options.skipNodeModules) continue;
      if (handleFile(filePath, options)) processedCount++;
    }

    if (options.logging) console.log(`CODE00000007 INPRINT finished, ${paths.length} - total files, ${processedCount} - processed, ${paths.length - processedCount} - skipped`);
  })();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,