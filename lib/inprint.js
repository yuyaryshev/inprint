"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleFile = handleFile;
exports.callEmbeddedFeatures = callEmbeddedFeatures;
exports.doInprint = doInprint;
exports.run = run;
exports.writeFileSyncIfChanged = exports.usageNotice = exports.endPrefix = exports.startPrefix = exports.inprint_prefix = void 0;

var _json = _interopRequireDefault(require("json5"));

var _globby = _interopRequireDefault(require("globby"));

var _fs = require("fs");

var _path = require("path");

var _embeddedFeatures = require("./embeddedFeatures");

var _InprintOptions = require("./InprintOptions");

var _formatTypescript = require("./formatTypescript");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const inprint_prefix = "@" + "INPRINT";
exports.inprint_prefix = inprint_prefix;
const startPrefix = "_START";
exports.startPrefix = startPrefix;
const endPrefix = "_END";
exports.endPrefix = endPrefix;
const usageNotice = `
USAGE:

// ${inprint_prefix}_START {...any_json_params...}
// Generated code will go here
// ${inprint_prefix}_END
`;
exports.usageNotice = usageNotice;

const writeFileSyncIfChanged = (fileName, content) => {
  let current;

  try {
    current = (0, _fs.readFileSync)(fileName, "utf-8");
  } catch (e) {}

  if (current !== content) {
    (0, _fs.writeFileSync)(fileName, content, "utf-8");
    return true;
  }

  return false;
};

exports.writeFileSyncIfChanged = writeFileSyncIfChanged;

function handleFile(filePath, options) {
  const contentStr = (0, _fs.readFileSync)(filePath, "utf-8");
  if (!contentStr.includes(inprint_prefix)) return false;
  const [fileHeader, ...parts0] = contentStr.split(inprint_prefix);
  const parts = [];

  for (let i = 0; i < parts0.length; i += 2) {
    const s = parts0[i];

    if (!s.startsWith(startPrefix)) {
      console.error(`CODE00000001 INPRINT_ERROR No ${inprint_prefix}${startPrefix} in ${filePath}`);
      return false;
    }

    if (!parts0[i + 1].startsWith(endPrefix)) {
      console.error(`CODE00000002 INPRINT_ERROR No ${inprint_prefix}${endPrefix} in ${filePath}`);
    }

    try {
      const [header, ...middleParts] = s.split("\n");
      const lastPart = middleParts.pop();
      const paramsStr = header.substr(startPrefix.length).trim();
      const middle = middleParts.join("\n");
      const tail = lastPart + inprint_prefix + parts0[i + 1];

      const params = _objectSpread({
        content: middle,
        absolutePath: filePath
      }, _json.default.parse(paramsStr));

      parts.push({
        header,
        params,
        middle,
        tail,
        newMiddle: ""
      });
    } catch (e) {
      console.error(`CODE00000003 INPRINT_ERROR ${e.message} in ${filePath}`);
      return false;
    }
  }

  for (let part of parts) {
    try {
      part.newMiddle = doInprint(part.params, options);
    } catch (e) {
      part.newMiddle = `// INPRINT_FAILED because of exception:\n${e.message || "NO_ERROR_MESSAGE"}\\n${e.stack || "NO_STACK_TRACE"}`.split("\n").join("\n//     ");
    }
  }

  const newContent = (0, _formatTypescript.formatTypescript)(fileHeader + inprint_prefix + parts.map(p => `${p.header}\n${p.newMiddle}\n${p.tail}`).join(inprint_prefix), options.prettierOpts);
  writeFileSyncIfChanged(filePath, newContent);
  return true;
}

function callEmbeddedFeatures(params, options) {
  for (let embeddedFeature of _embeddedFeatures.embeddedFeatures) {
    const r = embeddedFeature.func(params, options);
    if (r) return r;
  }

  return undefined;
}

function doInprint(params, options) {
  if (options.embeddedFeatures === "first" || options.embeddedFeatures === true) {
    const r = callEmbeddedFeatures(params, options);
    if (r) return r;
  }

  if (options.inprint) {
    const r = options.inprint(params, options);
    if (r) return r;
  }

  if (options.embeddedFeatures === "last") {
    const r = callEmbeddedFeatures(params, options);
    if (r) return r;
  }

  return `// INPRINT_ERROR None of inprint functions returned a result. They all returned undefined!`;
} // const testFilePath = `D:\\b\\Mine\\GIT_Work\\yatasks_one_api\\src\\inprintTestFile.ts`;
// handleFile(testFilePath);


function run(options0) {
  if (process.argv[2] === "--version" || process.argv[2] === "-v") {
    // @ts-ignore
    console.log("1.1.2");
    return;
  }

  let optionsPath = undefined;
  if (process.argv[2]) try {
    if (!options0) {
      optionsPath = process.argv[2];
      options0 = require(optionsPath);
    }
  } catch (e) {
    console.error(`CODE00000004 INPRINT failed to load '${optionsPath}' because of exception:`);
    console.error(e);
    process.exit(1);
    return;
  }

  try {
    if (!options0) {
      optionsPath = (0, _path.resolve)(process.cwd(), "inprint.cjs");
      options0 = require(optionsPath);
    }
  } catch (e) {
    if (e.code !== "MODULE_NOT_FOUND") {
      console.error(`CODE00000008 INPRINT failed to load '${optionsPath}' because of exception:`);
      console.error(e);
      process.exit(1);
      return;
    }
  }

  try {
    if (!options0) {
      optionsPath = (0, _path.resolve)(process.cwd(), "inprint.js");
      options0 = require(optionsPath);
    }
  } catch (e) {
    if (e.code !== "MODULE_NOT_FOUND") {
      console.error(`CODE00000009 INPRINT failed to load '${optionsPath}' because of exception:`);
      console.error(e);
      process.exit(1);
      return;
    }
  }

  const options = _objectSpread(_objectSpread({}, _InprintOptions.defaultInprintOptions), options0);

  let processedCount = 0;

  (async () => {
    if (options.logging) console.log(`CODE00000005 INPRINT options from ${optionsPath}`);
    const paths = await (0, _globby.default)(options.files);

    for (let filePath of paths) {
      if (options.logging === "files") console.log(`CODE00000006 INPRINT ${filePath}`);
      if (filePath.includes("node_modules") && options.skipNodeModules) continue;
      if (handleFile(filePath, options)) processedCount++;
    }

    if (options.logging) console.log(`CODE00000007 INPRINT finished, ${paths.length} - total files, ${processedCount} - processed, ${paths.length - processedCount} - skipped`);
    if (options.forceProcessTermination) process.exit(0);
  })();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbnByaW50LnRzIl0sIm5hbWVzIjpbImlucHJpbnRfcHJlZml4Iiwic3RhcnRQcmVmaXgiLCJlbmRQcmVmaXgiLCJ1c2FnZU5vdGljZSIsIndyaXRlRmlsZVN5bmNJZkNoYW5nZWQiLCJmaWxlTmFtZSIsImNvbnRlbnQiLCJjdXJyZW50IiwiZSIsImhhbmRsZUZpbGUiLCJmaWxlUGF0aCIsIm9wdGlvbnMiLCJjb250ZW50U3RyIiwiaW5jbHVkZXMiLCJmaWxlSGVhZGVyIiwicGFydHMwIiwic3BsaXQiLCJwYXJ0cyIsImkiLCJsZW5ndGgiLCJzIiwic3RhcnRzV2l0aCIsImNvbnNvbGUiLCJlcnJvciIsImhlYWRlciIsIm1pZGRsZVBhcnRzIiwibGFzdFBhcnQiLCJwb3AiLCJwYXJhbXNTdHIiLCJzdWJzdHIiLCJ0cmltIiwibWlkZGxlIiwiam9pbiIsInRhaWwiLCJwYXJhbXMiLCJhYnNvbHV0ZVBhdGgiLCJKU09ONSIsInBhcnNlIiwicHVzaCIsIm5ld01pZGRsZSIsIm1lc3NhZ2UiLCJwYXJ0IiwiZG9JbnByaW50Iiwic3RhY2siLCJuZXdDb250ZW50IiwibWFwIiwicCIsInByZXR0aWVyT3B0cyIsImNhbGxFbWJlZGRlZEZlYXR1cmVzIiwiZW1iZWRkZWRGZWF0dXJlIiwiZW1iZWRkZWRGZWF0dXJlcyIsInIiLCJmdW5jIiwidW5kZWZpbmVkIiwiaW5wcmludCIsInJ1biIsIm9wdGlvbnMwIiwicHJvY2VzcyIsImFyZ3YiLCJsb2ciLCJvcHRpb25zUGF0aCIsInJlcXVpcmUiLCJleGl0IiwiY3dkIiwiY29kZSIsImRlZmF1bHRJbnByaW50T3B0aW9ucyIsInByb2Nlc3NlZENvdW50IiwibG9nZ2luZyIsInBhdGhzIiwiZmlsZXMiLCJza2lwTm9kZU1vZHVsZXMiLCJmb3JjZVByb2Nlc3NUZXJtaW5hdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7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YjtBQUNQLEdBakJEO0FBa0JIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT041IGZyb20gXCJqc29uNVwiO1xuaW1wb3J0IGdsb2JieSBmcm9tIFwiZ2xvYmJ5XCI7XG5pbXBvcnQgeyByZWFkRmlsZVN5bmMsIHdyaXRlRmlsZVN5bmMgfSBmcm9tIFwiZnNcIjtcbmltcG9ydCB7IHJlc29sdmUgfSBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgZW1iZWRkZWRGZWF0dXJlcyB9IGZyb20gXCIuL2VtYmVkZGVkRmVhdHVyZXNcIjtcbmltcG9ydCB7IGRlZmF1bHRJbnByaW50T3B0aW9ucywgSW5wcmludE9wdGlvbnMgfSBmcm9tIFwiLi9JbnByaW50T3B0aW9uc1wiO1xuaW1wb3J0IHsgZm9ybWF0VHlwZXNjcmlwdCB9IGZyb20gXCIuL2Zvcm1hdFR5cGVzY3JpcHRcIjtcblxuZXhwb3J0IGNvbnN0IGlucHJpbnRfcHJlZml4ID0gXCJAXCIgKyBcIklOUFJJTlRcIjtcbmV4cG9ydCBjb25zdCBzdGFydFByZWZpeCA9IFwiX1NUQVJUXCI7XG5leHBvcnQgY29uc3QgZW5kUHJlZml4ID0gXCJfRU5EXCI7XG5leHBvcnQgY29uc3QgdXNhZ2VOb3RpY2UgPSBgXG5VU0FHRTpcblxuLy8gJHtpbnByaW50X3ByZWZpeH1fU1RBUlQgey4uLmFueV9qc29uX3BhcmFtcy4uLn1cbi8vIEdlbmVyYXRlZCBjb2RlIHdpbGwgZ28gaGVyZVxuLy8gJHtpbnByaW50X3ByZWZpeH1fRU5EXG5gO1xuXG5pbnRlcmZhY2UgSW5wcmludEZpbGVQYXJ0IHtcbiAgICBoZWFkZXI6IHN0cmluZztcbiAgICBwYXJhbXM6IGFueTtcbiAgICBtaWRkbGU6IHN0cmluZztcbiAgICB0YWlsOiBzdHJpbmc7XG4gICAgbmV3TWlkZGxlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCB3cml0ZUZpbGVTeW5jSWZDaGFuZ2VkID0gKGZpbGVOYW1lOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZykgPT4ge1xuICAgIGxldCBjdXJyZW50OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgICAgY3VycmVudCA9IHJlYWRGaWxlU3luYyhmaWxlTmFtZSwgXCJ1dGYtOFwiKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgaWYgKGN1cnJlbnQgIT09IGNvbnRlbnQpIHtcbiAgICAgICAgd3JpdGVGaWxlU3luYyhmaWxlTmFtZSwgY29udGVudCwgXCJ1dGYtOFwiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVGaWxlKGZpbGVQYXRoOiBzdHJpbmcsIG9wdGlvbnM6IElucHJpbnRPcHRpb25zKTogYm9vbGVhbiB7XG4gICAgY29uc3QgY29udGVudFN0ciA9IHJlYWRGaWxlU3luYyhmaWxlUGF0aCwgXCJ1dGYtOFwiKTtcblxuICAgIGlmICghY29udGVudFN0ci5pbmNsdWRlcyhpbnByaW50X3ByZWZpeCkpIHJldHVybiBmYWxzZTtcblxuICAgIGNvbnN0IFtmaWxlSGVhZGVyLCAuLi5wYXJ0czBdID0gY29udGVudFN0ci5zcGxpdChpbnByaW50X3ByZWZpeCk7XG4gICAgY29uc3QgcGFydHM6IElucHJpbnRGaWxlUGFydFtdID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0czAubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgY29uc3QgcyA9IHBhcnRzMFtpXTtcbiAgICAgICAgaWYgKCFzLnN0YXJ0c1dpdGgoc3RhcnRQcmVmaXgpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBDT0RFMDAwMDAwMDEgSU5QUklOVF9FUlJPUiBObyAke2lucHJpbnRfcHJlZml4fSR7c3RhcnRQcmVmaXh9IGluICR7ZmlsZVBhdGh9YCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBhcnRzMFtpICsgMV0uc3RhcnRzV2l0aChlbmRQcmVmaXgpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBDT0RFMDAwMDAwMDIgSU5QUklOVF9FUlJPUiBObyAke2lucHJpbnRfcHJlZml4fSR7ZW5kUHJlZml4fSBpbiAke2ZpbGVQYXRofWApO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IFtoZWFkZXIsIC4uLm1pZGRsZVBhcnRzXSA9IHMuc3BsaXQoXCJcXG5cIik7XG4gICAgICAgICAgICBjb25zdCBsYXN0UGFydCA9IG1pZGRsZVBhcnRzLnBvcCgpO1xuXG4gICAgICAgICAgICBjb25zdCBwYXJhbXNTdHIgPSBoZWFkZXIuc3Vic3RyKHN0YXJ0UHJlZml4Lmxlbmd0aCkudHJpbSgpO1xuICAgICAgICAgICAgY29uc3QgbWlkZGxlID0gbWlkZGxlUGFydHMuam9pbihcIlxcblwiKTtcbiAgICAgICAgICAgIGNvbnN0IHRhaWwgPSBsYXN0UGFydCArIGlucHJpbnRfcHJlZml4ICsgcGFydHMwW2kgKyAxXTtcblxuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG1pZGRsZSxcbiAgICAgICAgICAgICAgICBhYnNvbHV0ZVBhdGg6IGZpbGVQYXRoLFxuICAgICAgICAgICAgICAgIC4uLkpTT041LnBhcnNlKHBhcmFtc1N0ciksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcGFydHMucHVzaCh7IGhlYWRlciwgcGFyYW1zLCBtaWRkbGUsIHRhaWwsIG5ld01pZGRsZTogXCJcIiB9KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgQ09ERTAwMDAwMDAzIElOUFJJTlRfRVJST1IgJHtlLm1lc3NhZ2V9IGluICR7ZmlsZVBhdGh9YCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGxldCBwYXJ0IG9mIHBhcnRzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwYXJ0Lm5ld01pZGRsZSA9IGRvSW5wcmludChwYXJ0LnBhcmFtcywgb3B0aW9ucyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHBhcnQubmV3TWlkZGxlID0gYC8vIElOUFJJTlRfRkFJTEVEIGJlY2F1c2Ugb2YgZXhjZXB0aW9uOlxcbiR7ZS5tZXNzYWdlIHx8IFwiTk9fRVJST1JfTUVTU0FHRVwifVxcXFxuJHtcbiAgICAgICAgICAgICAgICBlLnN0YWNrIHx8IFwiTk9fU1RBQ0tfVFJBQ0VcIlxuICAgICAgICAgICAgfWBcbiAgICAgICAgICAgICAgICAuc3BsaXQoXCJcXG5cIilcbiAgICAgICAgICAgICAgICAuam9pbihcIlxcbi8vICAgICBcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBuZXdDb250ZW50ID1mb3JtYXRUeXBlc2NyaXB0KFxuICAgICAgICBmaWxlSGVhZGVyICsgaW5wcmludF9wcmVmaXggKyBwYXJ0cy5tYXAoKHApID0+IGAke3AuaGVhZGVyfVxcbiR7cC5uZXdNaWRkbGV9XFxuJHtwLnRhaWx9YCkuam9pbihpbnByaW50X3ByZWZpeCksIG9wdGlvbnMucHJldHRpZXJPcHRzKTtcbiAgICB3cml0ZUZpbGVTeW5jSWZDaGFuZ2VkKGZpbGVQYXRoLCBuZXdDb250ZW50KTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGxFbWJlZGRlZEZlYXR1cmVzKHBhcmFtczogYW55LCBvcHRpb25zOiBJbnByaW50T3B0aW9ucyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgZm9yIChsZXQgZW1iZWRkZWRGZWF0dXJlIG9mIGVtYmVkZGVkRmVhdHVyZXMpIHtcbiAgICAgICAgY29uc3QgciA9IGVtYmVkZGVkRmVhdHVyZS5mdW5jKHBhcmFtcywgb3B0aW9ucyk7XG4gICAgICAgIGlmIChyKSByZXR1cm4gcjtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRvSW5wcmludChwYXJhbXM6IGFueSwgb3B0aW9uczogSW5wcmludE9wdGlvbnMpOiBzdHJpbmcge1xuICAgIGlmIChvcHRpb25zLmVtYmVkZGVkRmVhdHVyZXMgPT09IFwiZmlyc3RcIiB8fCBvcHRpb25zLmVtYmVkZGVkRmVhdHVyZXMgPT09IHRydWUpIHtcbiAgICAgICAgY29uc3QgciA9IGNhbGxFbWJlZGRlZEZlYXR1cmVzKHBhcmFtcywgb3B0aW9ucyk7XG4gICAgICAgIGlmIChyKSByZXR1cm4gcjtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pbnByaW50KSB7XG4gICAgICAgIGNvbnN0IHIgPSBvcHRpb25zLmlucHJpbnQocGFyYW1zLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKHIpIHJldHVybiByO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmVtYmVkZGVkRmVhdHVyZXMgPT09IFwibGFzdFwiKSB7XG4gICAgICAgIGNvbnN0IHIgPSBjYWxsRW1iZWRkZWRGZWF0dXJlcyhwYXJhbXMsIG9wdGlvbnMpO1xuICAgICAgICBpZiAocikgcmV0dXJuIHI7XG4gICAgfVxuICAgIHJldHVybiBgLy8gSU5QUklOVF9FUlJPUiBOb25lIG9mIGlucHJpbnQgZnVuY3Rpb25zIHJldHVybmVkIGEgcmVzdWx0LiBUaGV5IGFsbCByZXR1cm5lZCB1bmRlZmluZWQhYDtcbn1cblxuLy8gY29uc3QgdGVzdEZpbGVQYXRoID0gYEQ6XFxcXGJcXFxcTWluZVxcXFxHSVRfV29ya1xcXFx5YXRhc2tzX29uZV9hcGlcXFxcc3JjXFxcXGlucHJpbnRUZXN0RmlsZS50c2A7XG4vLyBoYW5kbGVGaWxlKHRlc3RGaWxlUGF0aCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBydW4ob3B0aW9uczA/OiBJbnByaW50T3B0aW9ucyB8IHVuZGVmaW5lZCkge1xuICAgIGlmIChwcm9jZXNzLmFyZ3ZbMl0gPT09IFwiLS12ZXJzaW9uXCIgfHwgcHJvY2Vzcy5hcmd2WzJdID09PSBcIi12XCIpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjb25zb2xlLmxvZyhfX1ZFUlNJT05fXyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgb3B0aW9uc1BhdGg6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocHJvY2Vzcy5hcmd2WzJdKVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zMCkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnNQYXRoID0gcHJvY2Vzcy5hcmd2WzJdO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMwID0gcmVxdWlyZShvcHRpb25zUGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYENPREUwMDAwMDAwNCBJTlBSSU5UIGZhaWxlZCB0byBsb2FkICcke29wdGlvbnNQYXRofScgYmVjYXVzZSBvZiBleGNlcHRpb246YCk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICBpZiAoIW9wdGlvbnMwKSB7XG4gICAgICAgICAgICBvcHRpb25zUGF0aCA9IHJlc29sdmUocHJvY2Vzcy5jd2QoKSwgXCJpbnByaW50LmNqc1wiKTtcbiAgICAgICAgICAgIG9wdGlvbnMwID0gcmVxdWlyZShvcHRpb25zUGF0aCk7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlLmNvZGUgIT09IFwiTU9EVUxFX05PVF9GT1VORFwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBDT0RFMDAwMDAwMDggSU5QUklOVCBmYWlsZWQgdG8gbG9hZCAnJHtvcHRpb25zUGF0aH0nIGJlY2F1c2Ugb2YgZXhjZXB0aW9uOmApO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIGlmICghb3B0aW9uczApIHtcbiAgICAgICAgICAgIG9wdGlvbnNQYXRoID0gcmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBcImlucHJpbnQuanNcIik7XG4gICAgICAgICAgICBvcHRpb25zMCA9IHJlcXVpcmUob3B0aW9uc1BhdGgpO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZS5jb2RlICE9PSBcIk1PRFVMRV9OT1RfRk9VTkRcIikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgQ09ERTAwMDAwMDA5IElOUFJJTlQgZmFpbGVkIHRvIGxvYWQgJyR7b3B0aW9uc1BhdGh9JyBiZWNhdXNlIG9mIGV4Y2VwdGlvbjpgKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBvcHRpb25zOiBJbnByaW50T3B0aW9ucyA9IHsgLi4uZGVmYXVsdElucHJpbnRPcHRpb25zLCAuLi5vcHRpb25zMCB9O1xuICAgIGxldCBwcm9jZXNzZWRDb3VudCA9IDA7XG4gICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKG9wdGlvbnMubG9nZ2luZykgY29uc29sZS5sb2coYENPREUwMDAwMDAwNSBJTlBSSU5UIG9wdGlvbnMgZnJvbSAke29wdGlvbnNQYXRofWApO1xuICAgICAgICBjb25zdCBwYXRocyA9IGF3YWl0IGdsb2JieShvcHRpb25zLmZpbGVzKTtcblxuICAgICAgICBmb3IgKGxldCBmaWxlUGF0aCBvZiBwYXRocykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubG9nZ2luZyA9PT0gXCJmaWxlc1wiKSBjb25zb2xlLmxvZyhgQ09ERTAwMDAwMDA2IElOUFJJTlQgJHtmaWxlUGF0aH1gKTtcbiAgICAgICAgICAgIGlmIChmaWxlUGF0aC5pbmNsdWRlcyhcIm5vZGVfbW9kdWxlc1wiKSAmJiBvcHRpb25zLnNraXBOb2RlTW9kdWxlcykgY29udGludWU7XG4gICAgICAgICAgICBpZiAoaGFuZGxlRmlsZShmaWxlUGF0aCwgb3B0aW9ucykpIHByb2Nlc3NlZENvdW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMubG9nZ2luZylcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAgIGBDT0RFMDAwMDAwMDcgSU5QUklOVCBmaW5pc2hlZCwgJHtwYXRocy5sZW5ndGh9IC0gdG90YWwgZmlsZXMsICR7cHJvY2Vzc2VkQ291bnR9IC0gcHJvY2Vzc2VkLCAke1xuICAgICAgICAgICAgICAgICAgICBwYXRocy5sZW5ndGggLSBwcm9jZXNzZWRDb3VudFxuICAgICAgICAgICAgICAgIH0gLSBza2lwcGVkYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgaWYob3B0aW9ucy5mb3JjZVByb2Nlc3NUZXJtaW5hdGlvbilcbiAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgwKTtcbiAgICB9KSgpO1xufVxuIl19