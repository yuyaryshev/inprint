"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inprintIndexTs = inprintIndexTs;
exports.indexTsEmbeddedFeature = void 0;

var _fs = require("fs");

var _path = require("path");

const indexTsEmbeddedFeature = {
  name: "IndexTs",
  description: `Generates reexport for each file inside directory. 
Use exclude:['name1','name2'] to exclude some files. 
Use merge:[{name:'MERGE_NAME', suffix:'MERGE_SUFFIX'}] to merge exported consts with specified MERGE_SUFFIX as an array into one variable MERGE_NAME`,
  func: inprintIndexTs
};
exports.indexTsEmbeddedFeature = indexTsEmbeddedFeature;

function inprintIndexTs(paramsObject, options) {
  if (!paramsObject.absolutePath.endsWith("/index.ts")) return undefined;
  const excludes = new Set([...((paramsObject === null || paramsObject === void 0 ? void 0 : paramsObject.excludes) || []), ...((paramsObject === null || paramsObject === void 0 ? void 0 : paramsObject.exclude) || []), ...((paramsObject === null || paramsObject === void 0 ? void 0 : paramsObject.excluding) || [])]);
  const merges = [...new Set([...((paramsObject === null || paramsObject === void 0 ? void 0 : paramsObject.merge) || [])])];
  excludes.add("index");
  const baseParts = (0, _path.resolve)(paramsObject.absolutePath.split("/").slice(0, -1).join("/"));
  const fileNames = [];

  for (let dirent of (0, _fs.readdirSync)(baseParts, {
    withFileTypes: true
  })) {
    if (dirent.isDirectory()) continue;
    const fileName = dirent.name;
    const nameWoExt = fileName.split(".").slice(0, -1).join(".");
    if (!paramsObject.includeTests && nameWoExt.endsWith(".test")) continue;
    if (excludes.has(fileName) || excludes.has(nameWoExt)) continue;
    fileNames.push(nameWoExt);
  }

  fileNames.sort();
  const reexports = fileNames.map(f => `export * from "./${f}${options.appendJsInImports ? ".js" : ""}";`).join("\n");
  const mergeArrayBlocks = [];

  for (let mergeDefinition of merges) {
    const mergeLines = [];
    const mergeVars = [];

    for (let nameWoExt of fileNames) {
      mergeLines.push(`import {${nameWoExt}${mergeDefinition.suffix}} from "./${nameWoExt}";`);
      mergeVars.push(`${nameWoExt}${mergeDefinition.suffix}`);
    }

    mergeArrayBlocks.push(`
${mergeLines.join("\n")}
export const ${mergeDefinition.name} = [${mergeVars.join(", ")}];
`.trim());
  }

  const r = `
${reexports}

${mergeArrayBlocks.join("\n\n")}
`.trim();
  if (!r.length) return `export const unused901723 = 0; // No files found!`;
  return r;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbWJlZGRlZEZlYXR1cmVzL2luZGV4VHMudHMiXSwibmFtZXMiOlsiaW5kZXhUc0VtYmVkZGVkRmVhdHVyZSIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsImZ1bmMiLCJpbnByaW50SW5kZXhUcyIsInBhcmFtc09iamVjdCIsIm9wdGlvbnMiLCJhYnNvbHV0ZVBhdGgiLCJlbmRzV2l0aCIsInVuZGVmaW5lZCIsImV4Y2x1ZGVzIiwiU2V0IiwiZXhjbHVkZSIsImV4Y2x1ZGluZyIsIm1lcmdlcyIsIm1lcmdlIiwiYWRkIiwiYmFzZVBhcnRzIiwic3BsaXQiLCJzbGljZSIsImpvaW4iLCJmaWxlTmFtZXMiLCJkaXJlbnQiLCJ3aXRoRmlsZVR5cGVzIiwiaXNEaXJlY3RvcnkiLCJmaWxlTmFtZSIsIm5hbWVXb0V4dCIsImluY2x1ZGVUZXN0cyIsImhhcyIsInB1c2giLCJzb3J0IiwicmVleHBvcnRzIiwibWFwIiwiZiIsImFwcGVuZEpzSW5JbXBvcnRzIiwibWVyZ2VBcnJheUJsb2NrcyIsIm1lcmdlRGVmaW5pdGlvbiIsIm1lcmdlTGluZXMiLCJtZXJnZVZhcnMiLCJzdWZmaXgiLCJ0cmltIiwiciIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFJTyxNQUFNQSxzQkFBdUMsR0FBRztBQUNuREMsRUFBQUEsSUFBSSxFQUFFLFNBRDZDO0FBRW5EQyxFQUFBQSxXQUFXLEVBQUc7QUFDbEI7QUFDQSxxSkFKdUQ7QUFLbkRDLEVBQUFBLElBQUksRUFBRUM7QUFMNkMsQ0FBaEQ7OztBQVFBLFNBQVNBLGNBQVQsQ0FBd0JDLFlBQXhCLEVBQTJDQyxPQUEzQyxFQUFvRTtBQUN2RSxNQUFJLENBQUNELFlBQVksQ0FBQ0UsWUFBYixDQUEwQkMsUUFBMUIsQ0FBbUMsV0FBbkMsQ0FBTCxFQUFzRCxPQUFPQyxTQUFQO0FBRXRELFFBQU1DLFFBQVEsR0FBRyxJQUFJQyxHQUFKLENBQVEsQ0FDckIsSUFBSSxDQUFBTixZQUFZLFNB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UUFBTUMsQ0FBQyxHQUFJO0FBQ2YsRUFBRVYsU0FBVTtBQUNaO0FBQ0EsRUFBRUksZ0JBQWdCLENBQUNmLElBQWpCLENBQXNCLE1BQXRCLENBQThCO0FBQ2hDLENBSmMsQ0FJWm9CLElBSlksRUFBVjtBQU1BLE1BQUcsQ0FBQ0MsQ0FBQyxDQUFDQyxNQUFOLEVBQ0ksT0FBUSxtREFBUjtBQUVKLFNBQU9ELENBQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlYWRkaXJTeW5jIH0gZnJvbSBcImZzXCI7XHJcbmltcG9ydCB7IHJlc29sdmUgfSBmcm9tIFwicGF0aFwiO1xyXG5pbXBvcnQgeyBFbWJlZGRlZEZlYXR1cmUgfSBmcm9tIFwiLi4vRW1iZWRkZWRGZWF0dXJlXCI7XHJcbmltcG9ydCB7IElucHJpbnRPcHRpb25zIH0gZnJvbSBcIi4uL0lucHJpbnRPcHRpb25zXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaW5kZXhUc0VtYmVkZGVkRmVhdHVyZTogRW1iZWRkZWRGZWF0dXJlID0ge1xyXG4gICAgbmFtZTogXCJJbmRleFRzXCIsXHJcbiAgICBkZXNjcmlwdGlvbjogYEdlbmVyYXRlcyByZWV4cG9ydCBmb3IgZWFjaCBmaWxlIGluc2lkZSBkaXJlY3RvcnkuIFxyXG5Vc2UgZXhjbHVkZTpbJ25hbWUxJywnbmFtZTInXSB0byBleGNsdWRlIHNvbWUgZmlsZXMuIFxyXG5Vc2UgbWVyZ2U6W3tuYW1lOidNRVJHRV9OQU1FJywgc3VmZml4OidNRVJHRV9TVUZGSVgnfV0gdG8gbWVyZ2UgZXhwb3J0ZWQgY29uc3RzIHdpdGggc3BlY2lmaWVkIE1FUkdFX1NVRkZJWCBhcyBhbiBhcnJheSBpbnRvIG9uZSB2YXJpYWJsZSBNRVJHRV9OQU1FYCxcclxuICAgIGZ1bmM6IGlucHJpbnRJbmRleFRzLFxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlucHJpbnRJbmRleFRzKHBhcmFtc09iamVjdDogYW55LCBvcHRpb25zOiBJbnByaW50T3B0aW9ucykge1xyXG4gICAgaWYgKCFwYXJhbXNPYmplY3QuYWJzb2x1dGVQYXRoLmVuZHNXaXRoKFwiL2luZGV4LnRzXCIpKSByZXR1cm4gdW5kZWZpbmVkO1xyXG5cclxuICAgIGNvbnN0IGV4Y2x1ZGVzID0gbmV3IFNldChbXHJcbiAgICAgICAgLi4uKHBhcmFtc09iamVjdD8uZXhjbHVkZXMgfHwgW10pLFxyXG4gICAgICAgIC4uLihwYXJhbXNPYmplY3Q/LmV4Y2x1ZGUgfHwgW10pLFxyXG4gICAgICAgIC4uLihwYXJhbXNPYmplY3Q/LmV4Y2x1ZGluZyB8fCBbXSksXHJcbiAgICBdKTtcclxuXHJcbiAgICBjb25zdCBtZXJnZXMgPSBbLi4ubmV3IFNldChbLi4uKHBhcmFtc09iamVjdD8ubWVyZ2UgfHwgW10pXSldO1xyXG5cclxuICAgIGV4Y2x1ZGVzLmFkZChcImluZGV4XCIpO1xyXG4gICAgY29uc3QgYmFzZVBhcnRzID0gcmVzb2x2ZShwYXJhbXNPYmplY3QuYWJzb2x1dGVQYXRoLnNwbGl0KFwiL1wiKS5zbGljZSgwLCAtMSkuam9pbihcIi9cIikpO1xyXG5cclxuICAgIGNvbnN0IGZpbGVOYW1lcyA9IFtdO1xyXG4gICAgZm9yIChsZXQgZGlyZW50IG9mIHJlYWRkaXJTeW5jKGJhc2VQYXJ0cywge3dpdGhGaWxlVHlwZXMgOnRydWV9KSkge1xyXG4gICAgICAgIGlmKGRpcmVudC5pc0RpcmVjdG9yeSgpKSBjb250aW51ZTtcclxuICAgICAgICBjb25zdCBmaWxlTmFtZSA9IGRpcmVudC5uYW1lO1xyXG4gICAgICAgIGNvbnN0IG5hbWVXb0V4dCA9IGZpbGVOYW1lLnNwbGl0KFwiLlwiKS5zbGljZSgwLCAtMSkuam9pbihcIi5cIik7XHJcbiAgICAgICAgaWYgKCFwYXJhbXNPYmplY3QuaW5jbHVkZVRlc3RzICYmIG5hbWVXb0V4dC5lbmRzV2l0aChcIi50ZXN0XCIpKSBjb250aW51ZTtcclxuICAgICAgICBpZiAoZXhjbHVkZXMuaGFzKGZpbGVOYW1lKSB8fCBleGNsdWRlcy5oYXMobmFtZVdvRXh0KSkgY29udGludWU7XHJcbiAgICAgICAgZmlsZU5hbWVzLnB1c2gobmFtZVdvRXh0KTtcclxuICAgIH1cclxuICAgIGZpbGVOYW1lcy5zb3J0KCk7XHJcblxyXG4gICAgY29uc3QgcmVleHBvcnRzID0gZmlsZU5hbWVzXHJcbiAgICAgICAgLm1hcCgoZikgPT4gYGV4cG9ydCAqIGZyb20gXCIuLyR7Zn0ke29wdGlvbnMuYXBwZW5kSnNJbkltcG9ydHMgPyBcIi5qc1wiIDogXCJcIn1cIjtgKVxyXG4gICAgICAgIC5qb2luKFwiXFxuXCIpO1xyXG5cclxuICAgIGNvbnN0IG1lcmdlQXJyYXlCbG9ja3MgPSBbXTtcclxuICAgIGZvciAobGV0IG1lcmdlRGVmaW5pdGlvbiBvZiBtZXJnZXMpIHtcclxuICAgICAgICBjb25zdCBtZXJnZUxpbmVzID0gW107XHJcbiAgICAgICAgY29uc3QgbWVyZ2VWYXJzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgbmFtZVdvRXh0IG9mIGZpbGVOYW1lcykge1xyXG4gICAgICAgICAgICBtZXJnZUxpbmVzLnB1c2goYGltcG9ydCB7JHtuYW1lV29FeHR9JHttZXJnZURlZmluaXRpb24uc3VmZml4fX0gZnJvbSBcIi4vJHtuYW1lV29FeHR9XCI7YCk7XHJcbiAgICAgICAgICAgIG1lcmdlVmFycy5wdXNoKGAke25hbWVXb0V4dH0ke21lcmdlRGVmaW5pdGlvbi5zdWZmaXh9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1lcmdlQXJyYXlCbG9ja3MucHVzaChcclxuICAgICAgICAgICAgYFxyXG4ke21lcmdlTGluZXMuam9pbihcIlxcblwiKX1cclxuZXhwb3J0IGNvbnN0ICR7bWVyZ2VEZWZpbml0aW9uLm5hbWV9ID0gWyR7bWVyZ2VWYXJzLmpvaW4oXCIsIFwiKX1dO1xyXG5gLnRyaW0oKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgciA9IGBcclxuJHtyZWV4cG9ydHN9XHJcblxyXG4ke21lcmdlQXJyYXlCbG9ja3Muam9pbihcIlxcblxcblwiKX1cclxuYC50cmltKCk7XHJcblxyXG4gICAgaWYoIXIubGVuZ3RoKVxyXG4gICAgICAgIHJldHVybiBgZXhwb3J0IGNvbnN0IHVudXNlZDkwMTcyMyA9IDA7IC8vIE5vIGZpbGVzIGZvdW5kIWA7XHJcblxyXG4gICAgcmV0dXJuIHI7XHJcbn1cclxuIl19