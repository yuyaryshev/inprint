"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inprintIndexTs = inprintIndexTs;
exports.indexTsEmbeddedFeature = void 0;

var _fs = require("fs");

const indexTsEmbeddedFeature = {
  name: "IndexTs",
  description: `Generates reexport for each file inside directory. 
Use exclude:['name1','name2'] to exclude some files. 
Use merge:[{name:'MERGE_NAME', suffix:'MERGE_SUFFIX'}] to merge exported consts with specified MERGE_SUFFIX as an array into one variable MERGE_NAME`,
  func: inprintIndexTs
};
exports.indexTsEmbeddedFeature = indexTsEmbeddedFeature;

function inprintIndexTs(paramsObject, options) {
  if (!paramsObject.absolutePath.endsWith("/index.ts")) return undefined;
  const excludes = new Set([...((paramsObject === null || paramsObject === void 0 ? void 0 : paramsObject.excludes) || []), ...((paramsObject === null || paramsObject === void 0 ? void 0 : paramsObject.exclude) || []), ...((paramsObject === null || paramsObject === void 0 ? void 0 : paramsObject.excluding) || [])]);
  const merges = [...new Set([...((paramsObject === null || paramsObject === void 0 ? void 0 : paramsObject.merge) || [])])];
  excludes.add("index");
  const baseParts = paramsObject.absolutePath.split("/").slice(0, -1).join("/");
  const fileNames = [];

  for (let dirent of (0, _fs.readdirSync)(baseParts, {
    withFileTypes: true
  })) {
    if (dirent.isDirectory()) continue;
    const fileName = dirent.name;
    const nameWoExt = fileName.split(".").slice(0, -1).join(".");
    if (!paramsObject.includeTests && nameWoExt.endsWith(".test")) continue;
    if (excludes.has(fileName) || excludes.has(nameWoExt)) continue;
    fileNames.push(nameWoExt);
  }

  fileNames.sort();
  const reexports = fileNames.map(f => `export * from "./${f}${options.appendJsInImports ? ".js" : ""}";`).join("\n");
  const mergeArrayBlocks = [];

  for (let mergeDefinition of merges) {
    const mergeLines = [];
    const mergeVars = [];

    for (let nameWoExt of fileNames) {
      mergeLines.push(`import {${nameWoExt}${mergeDefinition.suffix}} from "./${nameWoExt}";`);
      mergeVars.push(`${nameWoExt}${mergeDefinition.suffix}`);
    }

    mergeArrayBlocks.push(`
${mergeLines.join("\n")}
export const ${mergeDefinition.name} = [${mergeVars.join(", ")}];
`.trim());
  }

  return `
${reexports}

${mergeArrayBlocks.join("\n\n")}
`.trim();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbWJlZGRlZEZlYXR1cmVzL2luZGV4VHMudHMiXSwibmFtZXMiOlsiaW5kZXhUc0VtYmVkZGVkRmVhdHVyZSIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsImZ1bmMiLCJpbnByaW50SW5kZXhUcyIsInBhcmFtc09iamVjdCIsIm9wdGlvbnMiLCJhYnNvbHV0ZVBhdGgiLCJlbmRzV2l0aCIsInVuZGVmaW5lZCIsImV4Y2x1ZGVzIiwiU2V0IiwiZXhjbHVkZSIsImV4Y2x1ZGluZyIsIm1lcmdlcyIsIm1lcmdlIiwiYWRkIiwiYmFzZVBhcnRzIiwic3BsaXQiLCJzbGljZSIsImpvaW4iLCJmaWxlTmFtZXMiLCJkaXJlbnQiLCJ3aXRoRmlsZVR5cGVzIiwiaXNEaXJlY3RvcnkiLCJmaWxlTmFtZSIsIm5hbWVXb0V4dCIsImluY2x1ZGVUZXN0cyIsImhhcyIsInB1c2giLCJzb3J0IiwicmVleHBvcnRzIiwibWFwIiwiZiIsImFwcGVuZEpzSW5JbXBvcnRzIiwibWVyZ2VBcnJheUJsb2NrcyIsIm1lcmdlRGVmaW5pdGlvbiIsIm1lcmdlTGluZXMiLCJtZXJnZVZhcnMiLCJzdWZmaXgiLCJ0cmltIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUlPLE1BQU1BLHNCQUF1QyxHQUFHO0FBQ25EQyxFQUFBQSxJQUFJLEVBQUUsU0FENkM7QUFFbkRDLEVBQUFBLFdBQVcsRUFBRztBQUNsQjtBQUNBLHFKQUp1RDtBQUtuREMsRUFBQUEsSUFBSSxFQUFFQztBQUw2QyxDQUFoRDs7O0FBUUEsU0FBU0EsY0FBVCxDQUF3QkMsWUFBeEIsRUFBMkNDLE9BQTNDLEVBQW9FO0FBQ3ZFLE1BQUksQ0FBQ0QsWUFBWSxDQUFDRSxZQUFiLENBQTBCQyxRQUExQixDQUFtQyxXQUFuQyxDQUFMLEVBQXNELE9BQU9DLFNBQVA7QUFFdEQsUUFBTUMsUUFBUSxHQUFHLElBQUlDLEdBQUosQ0FBUSxDQUNyQixJQUFJLENBQUFOLFlBQVksU0FBWixJQUFBQSxZQUFZLFdBQVos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LEVBQUVJLGdCQUFnQixDQUFDZixJQUFqQixDQUFzQixNQUF0QixDQUE4QjtBQUNoQyxDQUpXLENBSVRvQixJQUpTLEVBQVA7QUFLSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlYWRkaXJTeW5jIH0gZnJvbSBcImZzXCI7XHJcbmltcG9ydCB7IEVtYmVkZGVkRmVhdHVyZSB9IGZyb20gXCIuLi9FbWJlZGRlZEZlYXR1cmVcIjtcclxuaW1wb3J0IHsgSW5wcmludE9wdGlvbnMgfSBmcm9tIFwiLi4vSW5wcmludE9wdGlvbnNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBpbmRleFRzRW1iZWRkZWRGZWF0dXJlOiBFbWJlZGRlZEZlYXR1cmUgPSB7XHJcbiAgICBuYW1lOiBcIkluZGV4VHNcIixcclxuICAgIGRlc2NyaXB0aW9uOiBgR2VuZXJhdGVzIHJlZXhwb3J0IGZvciBlYWNoIGZpbGUgaW5zaWRlIGRpcmVjdG9yeS4gXHJcblVzZSBleGNsdWRlOlsnbmFtZTEnLCduYW1lMiddIHRvIGV4Y2x1ZGUgc29tZSBmaWxlcy4gXHJcblVzZSBtZXJnZTpbe25hbWU6J01FUkdFX05BTUUnLCBzdWZmaXg6J01FUkdFX1NVRkZJWCd9XSB0byBtZXJnZSBleHBvcnRlZCBjb25zdHMgd2l0aCBzcGVjaWZpZWQgTUVSR0VfU1VGRklYIGFzIGFuIGFycmF5IGludG8gb25lIHZhcmlhYmxlIE1FUkdFX05BTUVgLFxyXG4gICAgZnVuYzogaW5wcmludEluZGV4VHMsXHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5wcmludEluZGV4VHMocGFyYW1zT2JqZWN0OiBhbnksIG9wdGlvbnM6IElucHJpbnRPcHRpb25zKSB7XHJcbiAgICBpZiAoIXBhcmFtc09iamVjdC5hYnNvbHV0ZVBhdGguZW5kc1dpdGgoXCIvaW5kZXgudHNcIikpIHJldHVybiB1bmRlZmluZWQ7XHJcblxyXG4gICAgY29uc3QgZXhjbHVkZXMgPSBuZXcgU2V0KFtcclxuICAgICAgICAuLi4ocGFyYW1zT2JqZWN0Py5leGNsdWRlcyB8fCBbXSksXHJcbiAgICAgICAgLi4uKHBhcmFtc09iamVjdD8uZXhjbHVkZSB8fCBbXSksXHJcbiAgICAgICAgLi4uKHBhcmFtc09iamVjdD8uZXhjbHVkaW5nIHx8IFtdKSxcclxuICAgIF0pO1xyXG5cclxuICAgIGNvbnN0IG1lcmdlcyA9IFsuLi5uZXcgU2V0KFsuLi4ocGFyYW1zT2JqZWN0Py5tZXJnZSB8fCBbXSldKV07XHJcblxyXG4gICAgZXhjbHVkZXMuYWRkKFwiaW5kZXhcIik7XHJcbiAgICBjb25zdCBiYXNlUGFydHMgPSBwYXJhbXNPYmplY3QuYWJzb2x1dGVQYXRoLnNwbGl0KFwiL1wiKS5zbGljZSgwLCAtMSkuam9pbihcIi9cIik7XHJcblxyXG4gICAgY29uc3QgZmlsZU5hbWVzID0gW107XHJcbiAgICBmb3IgKGxldCBkaXJlbnQgb2YgcmVhZGRpclN5bmMoYmFzZVBhcnRzLCB7d2l0aEZpbGVUeXBlcyA6dHJ1ZX0pKSB7XHJcbiAgICAgICAgaWYoZGlyZW50LmlzRGlyZWN0b3J5KCkpIGNvbnRpbnVlO1xyXG4gICAgICAgIGNvbnN0IGZpbGVOYW1lID0gZGlyZW50Lm5hbWU7XHJcbiAgICAgICAgY29uc3QgbmFtZVdvRXh0ID0gZmlsZU5hbWUuc3BsaXQoXCIuXCIpLnNsaWNlKDAsIC0xKS5qb2luKFwiLlwiKTtcclxuICAgICAgICBpZiAoIXBhcmFtc09iamVjdC5pbmNsdWRlVGVzdHMgJiYgbmFtZVdvRXh0LmVuZHNXaXRoKFwiLnRlc3RcIikpIGNvbnRpbnVlO1xyXG4gICAgICAgIGlmIChleGNsdWRlcy5oYXMoZmlsZU5hbWUpIHx8IGV4Y2x1ZGVzLmhhcyhuYW1lV29FeHQpKSBjb250aW51ZTtcclxuICAgICAgICBmaWxlTmFtZXMucHVzaChuYW1lV29FeHQpO1xyXG4gICAgfVxyXG4gICAgZmlsZU5hbWVzLnNvcnQoKTtcclxuXHJcbiAgICBjb25zdCByZWV4cG9ydHMgPSBmaWxlTmFtZXNcclxuICAgICAgICAubWFwKChmKSA9PiBgZXhwb3J0ICogZnJvbSBcIi4vJHtmfSR7b3B0aW9ucy5hcHBlbmRKc0luSW1wb3J0cyA/IFwiLmpzXCIgOiBcIlwifVwiO2ApXHJcbiAgICAgICAgLmpvaW4oXCJcXG5cIik7XHJcblxyXG4gICAgY29uc3QgbWVyZ2VBcnJheUJsb2NrcyA9IFtdO1xyXG4gICAgZm9yIChsZXQgbWVyZ2VEZWZpbml0aW9uIG9mIG1lcmdlcykge1xyXG4gICAgICAgIGNvbnN0IG1lcmdlTGluZXMgPSBbXTtcclxuICAgICAgICBjb25zdCBtZXJnZVZhcnMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBuYW1lV29FeHQgb2YgZmlsZU5hbWVzKSB7XHJcbiAgICAgICAgICAgIG1lcmdlTGluZXMucHVzaChgaW1wb3J0IHske25hbWVXb0V4dH0ke21lcmdlRGVmaW5pdGlvbi5zdWZmaXh9fSBmcm9tIFwiLi8ke25hbWVXb0V4dH1cIjtgKTtcclxuICAgICAgICAgICAgbWVyZ2VWYXJzLnB1c2goYCR7bmFtZVdvRXh0fSR7bWVyZ2VEZWZpbml0aW9uLnN1ZmZpeH1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbWVyZ2VBcnJheUJsb2Nrcy5wdXNoKFxyXG4gICAgICAgICAgICBgXHJcbiR7bWVyZ2VMaW5lcy5qb2luKFwiXFxuXCIpfVxyXG5leHBvcnQgY29uc3QgJHttZXJnZURlZmluaXRpb24ubmFtZX0gPSBbJHttZXJnZVZhcnMuam9pbihcIiwgXCIpfV07XHJcbmAudHJpbSgpXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYFxyXG4ke3JlZXhwb3J0c31cclxuXHJcbiR7bWVyZ2VBcnJheUJsb2Nrcy5qb2luKFwiXFxuXFxuXCIpfVxyXG5gLnRyaW0oKTtcclxufVxyXG4iXX0=