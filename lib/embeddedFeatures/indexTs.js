"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inprintIndexTs = inprintIndexTs;
exports.indexTsEmbeddedFeature = void 0;

var _fs = require("fs");

const indexTsEmbeddedFeature = {
  name: "IndexTs",
  description: `Generates reexport for each file inside directory. 
Use exclude:['name1','name2'] to exclude some files. 
Use merge:[{name:'MERGE_NAME', suffix:'MERGE_SUFFIX'}] to merge exported consts with specified MERGE_SUFFIX as an array into one variable MERGE_NAME`,
  func: inprintIndexTs
};
exports.indexTsEmbeddedFeature = indexTsEmbeddedFeature;

function inprintIndexTs(paramsObject, options) {
  if (!paramsObject.absolutePath.endsWith("/index.ts")) return undefined;
  const excludes = new Set([...((paramsObject === null || paramsObject === void 0 ? void 0 : paramsObject.excludes) || []), ...((paramsObject === null || paramsObject === void 0 ? void 0 : paramsObject.exclude) || []), ...((paramsObject === null || paramsObject === void 0 ? void 0 : paramsObject.excluding) || [])]);
  const merges = [...new Set([...((paramsObject === null || paramsObject === void 0 ? void 0 : paramsObject.merge) || [])])];
  excludes.add("index");
  const baseParts = paramsObject.absolutePath.split("/").slice(0, -1).join("/");
  const fileNames = [];

  for (let fileName of (0, _fs.readdirSync)(baseParts)) {
    const nameWoExt = fileName.split(".").slice(0, -1).join(".");
    if (!paramsObject.includeTests && nameWoExt.endsWith(".test")) continue;
    if (excludes.has(fileName) || excludes.has(nameWoExt)) continue;
    fileNames.push(nameWoExt);
  }

  fileNames.sort();
  const reexports = fileNames.map(f => `export * from "./${f}${options.appendJsInImports ? ".js" : ""}";`).join("\n");
  const mergeArrayBlocks = [];

  for (let mergeDefinition of merges) {
    const mergeLines = [];
    const mergeVars = [];

    for (let nameWoExt of fileNames) {
      mergeLines.push(`import {${nameWoExt}${mergeDefinition.suffix}} from "./${nameWoExt}";`);
      mergeVars.push(`${nameWoExt}${mergeDefinition.suffix}`);
    }

    mergeArrayBlocks.push(`
${mergeLines.join("\n")}
export const ${mergeDefinition.name} = [${mergeVars.join(", ")}];
`.trim());
  }

  return `
${reexports}

${mergeArrayBlocks.join("\n\n")}
`.trim();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbWJlZGRlZEZlYXR1cmVzL2luZGV4VHMudHMiXSwibmFtZXMiOlsiaW5kZXhUc0VtYmVkZGVkRmVhdHVyZSIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsImZ1bmMiLCJpbnByaW50SW5kZXhUcyIsInBhcmFtc09iamVjdCIsIm9wdGlvbnMiLCJhYnNvbHV0ZVBhdGgiLCJlbmRzV2l0aCIsInVuZGVmaW5lZCIsImV4Y2x1ZGVzIiwiU2V0IiwiZXhjbHVkZSIsImV4Y2x1ZGluZyIsIm1lcmdlcyIsIm1lcmdlIiwiYWRkIiwiYmFzZVBhcnRzIiwic3BsaXQiLCJzbGljZSIsImpvaW4iLCJmaWxlTmFtZXMiLCJmaWxlTmFtZSIsIm5hbWVXb0V4dCIsImluY2x1ZGVUZXN0cyIsImhhcyIsInB1c2giLCJzb3J0IiwicmVleHBvcnRzIiwibWFwIiwiZiIsImFwcGVuZEpzSW5JbXBvcnRzIiwibWVyZ2VBcnJheUJsb2NrcyIsIm1lcmdlRGVmaW5pdGlvbiIsIm1lcmdlTGluZXMiLCJtZXJnZVZhcnMiLCJzdWZmaXgiLCJ0cmltIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUlPLE1BQU1BLHNCQUF1QyxHQUFHO0FBQ25EQyxFQUFBQSxJQUFJLEVBQUUsU0FENkM7QUFFbkRDLEVBQUFBLFdBQVcsRUFBRztBQUNsQjtBQUNBLHFKQUp1RDtBQUtuREMsRUFBQUEsSUFBSSxFQUFFQztBQUw2QyxDQUFoRDs7O0FBUUEsU0FBU0EsY0FBVCxDQUF3QkMsWUFBeEIsRUFBMkNDLE9BQTNDLEVBQW9FO0FBQ3ZFLE1BQUksQ0FBQ0QsWUFBWSxDQUFDRSxZQUFiLENBQTBCQyxRQUExQixDQUFtQyxXQUFuQyxDQUFMLEVBQXNELE9BQU9DLFNBQVA7QUFFdEQsUUFBTUMsUUFBUSxHQUFHLElBQUlDLEdBQUosQ0FBUSxDQUNyQixJQUFJLENBQUFOLFlBQVksU0FBWixJQUFBQSxZQUFZLFdBQVosWUFBQUEsWUFBWSxDQUFFSyxRQUFkLEtBQTBCLEVBQTlCLENBRHFCLEVBRXJCLElBQUksQ0FBQUwsWUFBWSxTQUFaLElBQUFBLFlBQVksV0FBWixZQUFBQSxZQUFZLENBQUVPLE9BQWQsS0FBeUIsRUFBN0IsQ0FGcUIsRUFHckIsSUFBSSxDQUFBUCxZQUFZLFNBQVosSUFBQUEsWUFBWSxXQUFaLFlBQUFBLFlBQVksQ0FBRVEsU0FBZCxLQUEyQixFQUEvQixDQUhxQixDQUFSLENBQWpCO0FBTUEsUUFBTUMsTUFBTSxHQUFHLENBQUMsR0FBRyxJQUFJSCxHQUFKLENBQVEsQ0FBQyxJQUFJLENBQUFOLFlBQVksU0FBWixJQUFBQSxZQUFZLFdBQVosWUFBQUEsWUFBWSxDQUFFVSxLQUFkLEtBQXVCLEVBQTNCLENBQUQsQ0FBUixDQUFKLENBQWY7QUFFQUwsRUFBQUEsUUFBUSxDQUFDTSxHQUFULENBQWEsT0FBYjtBQUNBLFFBQU1DLFNBQVMsR0FBR1osWUFBWSxDQUFDRSxZQUFiLENBQTBCVyxLQUExQixDQUFnQyxHQUFoQyxFQUFxQ0MsS0FBckMsQ0FBMkMsQ0FBM0MsRUFBOEMsQ0FBQyxDQUEvQyxFQUFrREMsSUFBbEQsQ0FBdUQsR0FBdkQsQ0FBbEI7QUFFQSxRQUFNQyxTQUFTLEdBQUcsRUFBbEI7O0FBQ0EsT0FBSyxJQUFJQyxRQUFULElBQXFCLHFCQUFZTCxTQUFaLENBQXJCLEVBQTZDO0FBQ3pDLFVBQU1NLFNBQVMsR0FBR0QsUUFBUSxDQUFDSixLQUFULENBQWUsR0FBZixFQUFvQkMsS0FBcEIsQ0FBMEIsQ0FBMUIsRUFBNkIsQ0FBQyxDQUE5QixFQUFpQ0MsSUFBakMsQ0FBc0MsR0FBdEMsQ0FBbEI7QUFDQSxRQUFJLENBQUNmLFlBQVksQ0FBQ21CLFlBQWQsSUFBOEJELFNBQVMsQ0FBQ2YsUUFBVixDQUFtQixPQUFuQixDQUFsQyxFQUErRDtBQUMvRCxRQUFJRSxRQUFRLENBQUNlLEdBQVQsQ0FBYUgsUUFBYixLQUEwQlosUUFBUSxDQUFDZSxHQUFULENBQWFGLFNBQWIsQ0FBOUIsRUFBdUQ7QUFDdkRGLElBQUFBLFNBQVMsQ0FBQ0ssSUFBVixDQUFlSCxTQUFmO0FBQ0g7O0FBQ0RGLEVBQUFBLFNBQVMsQ0FBQ00sSUFBVjtBQUVBLFFBQU1DLFNBQVMsR0FBR1AsU0FBUyxDQUN0QlEsR0FEYSxDQUNSQyxDQUFELElBQVEsb0JBQW1CQSxDQUFFLEdBQUV4QixPQUFPLENBQUN5QixpQkFBUixHQUE0QixLQUE1QixHQUFvQyxFQUFHLElBRDdELEVBRWJYLElBRmEsQ0FFUixJQUZRLENBQWxCO0FBSUEsUUFBTVksZ0JBQWdCLEdBQUcsRUFBekI7O0FBQ0EsT0FBSyxJQUFJQyxlQUFULElBQTRCbkIsTUFBNUIsRUFBb0M7QUFDaEMsVUFBTW9CLFVBQVUsR0FBRyxFQUFuQjtBQUNBLFVBQU1DLFNBQVMsR0FBRyxFQUFsQjs7QUFDQSxTQUFLLElBQUlaLFNBQVQsSUFBc0JGLFNBQXRCLEVBQWlDO0FBQzdCYSxNQUFBQSxVQUFVLENBQUNSLElBQVgsQ0FBaUIsV0FBVUgsU0FBVSxHQUFFVSxlQUFlLENBQUNHLE1BQU8sYUFBWWIsU0FBVSxJQUFwRjtBQUNBWSxNQUFBQSxTQUFTLENBQUNULElBQVYsQ0FBZ0IsR0FBRUgsU0FBVSxHQUFFVSxlQUFlLENBQUNHLE1BQU8sRUFBckQ7QUFDSDs7QUFDREosSUFBQUEsZ0JBQWdCLENBQUNOLElBQWpCLENBQ0s7QUFDYixFQUFFUSxVQUFVLENBQUNkLElBQVgsQ0FBZ0IsSUFBaEIsQ0FBc0I7QUFDeEIsZUFBZWEsZUFBZSxDQUFDaEMsSUFBSyxPQUFNa0MsU0FBUyxDQUFDZixJQUFWLENBQWUsSUFBZixDQUFxQjtBQUMvRCxDQUhZLENBR1ZpQixJQUhVLEVBREo7QUFNSDs7QUFFRCxTQUFRO0FBQ1osRUFBRVQsU0FBVTtBQUNaO0FBQ0EsRUFBRUksZ0JBQWdCLENBQUNaLElBQWpCLENBQXNCLE1BQXRCLENBQThCO0FBQ2hDLENBSlcsQ0FJVGlCLElBSlMsRUFBUDtBQUtIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVhZGRpclN5bmMgfSBmcm9tIFwiZnNcIjtcclxuaW1wb3J0IHsgRW1iZWRkZWRGZWF0dXJlIH0gZnJvbSBcIi4uL0VtYmVkZGVkRmVhdHVyZVwiO1xyXG5pbXBvcnQgeyBJbnByaW50T3B0aW9ucyB9IGZyb20gXCIuLi9JbnByaW50T3B0aW9uc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGluZGV4VHNFbWJlZGRlZEZlYXR1cmU6IEVtYmVkZGVkRmVhdHVyZSA9IHtcclxuICAgIG5hbWU6IFwiSW5kZXhUc1wiLFxyXG4gICAgZGVzY3JpcHRpb246IGBHZW5lcmF0ZXMgcmVleHBvcnQgZm9yIGVhY2ggZmlsZSBpbnNpZGUgZGlyZWN0b3J5LiBcclxuVXNlIGV4Y2x1ZGU6WyduYW1lMScsJ25hbWUyJ10gdG8gZXhjbHVkZSBzb21lIGZpbGVzLiBcclxuVXNlIG1lcmdlOlt7bmFtZTonTUVSR0VfTkFNRScsIHN1ZmZpeDonTUVSR0VfU1VGRklYJ31dIHRvIG1lcmdlIGV4cG9ydGVkIGNvbnN0cyB3aXRoIHNwZWNpZmllZCBNRVJHRV9TVUZGSVggYXMgYW4gYXJyYXkgaW50byBvbmUgdmFyaWFibGUgTUVSR0VfTkFNRWAsXHJcbiAgICBmdW5jOiBpbnByaW50SW5kZXhUcyxcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbnByaW50SW5kZXhUcyhwYXJhbXNPYmplY3Q6IGFueSwgb3B0aW9uczogSW5wcmludE9wdGlvbnMpIHtcclxuICAgIGlmICghcGFyYW1zT2JqZWN0LmFic29sdXRlUGF0aC5lbmRzV2l0aChcIi9pbmRleC50c1wiKSkgcmV0dXJuIHVuZGVmaW5lZDtcclxuXHJcbiAgICBjb25zdCBleGNsdWRlcyA9IG5ldyBTZXQoW1xyXG4gICAgICAgIC4uLihwYXJhbXNPYmplY3Q/LmV4Y2x1ZGVzIHx8IFtdKSxcclxuICAgICAgICAuLi4ocGFyYW1zT2JqZWN0Py5leGNsdWRlIHx8IFtdKSxcclxuICAgICAgICAuLi4ocGFyYW1zT2JqZWN0Py5leGNsdWRpbmcgfHwgW10pLFxyXG4gICAgXSk7XHJcblxyXG4gICAgY29uc3QgbWVyZ2VzID0gWy4uLm5ldyBTZXQoWy4uLihwYXJhbXNPYmplY3Q/Lm1lcmdlIHx8IFtdKV0pXTtcclxuXHJcbiAgICBleGNsdWRlcy5hZGQoXCJpbmRleFwiKTtcclxuICAgIGNvbnN0IGJhc2VQYXJ0cyA9IHBhcmFtc09iamVjdC5hYnNvbHV0ZVBhdGguc3BsaXQoXCIvXCIpLnNsaWNlKDAsIC0xKS5qb2luKFwiL1wiKTtcclxuXHJcbiAgICBjb25zdCBmaWxlTmFtZXMgPSBbXTtcclxuICAgIGZvciAobGV0IGZpbGVOYW1lIG9mIHJlYWRkaXJTeW5jKGJhc2VQYXJ0cykpIHtcclxuICAgICAgICBjb25zdCBuYW1lV29FeHQgPSBmaWxlTmFtZS5zcGxpdChcIi5cIikuc2xpY2UoMCwgLTEpLmpvaW4oXCIuXCIpO1xyXG4gICAgICAgIGlmICghcGFyYW1zT2JqZWN0LmluY2x1ZGVUZXN0cyAmJiBuYW1lV29FeHQuZW5kc1dpdGgoXCIudGVzdFwiKSkgY29udGludWU7XHJcbiAgICAgICAgaWYgKGV4Y2x1ZGVzLmhhcyhmaWxlTmFtZSkgfHwgZXhjbHVkZXMuaGFzKG5hbWVXb0V4dCkpIGNvbnRpbnVlO1xyXG4gICAgICAgIGZpbGVOYW1lcy5wdXNoKG5hbWVXb0V4dCk7XHJcbiAgICB9XHJcbiAgICBmaWxlTmFtZXMuc29ydCgpO1xyXG5cclxuICAgIGNvbnN0IHJlZXhwb3J0cyA9IGZpbGVOYW1lc1xyXG4gICAgICAgIC5tYXAoKGYpID0+IGBleHBvcnQgKiBmcm9tIFwiLi8ke2Z9JHtvcHRpb25zLmFwcGVuZEpzSW5JbXBvcnRzID8gXCIuanNcIiA6IFwiXCJ9XCI7YClcclxuICAgICAgICAuam9pbihcIlxcblwiKTtcclxuXHJcbiAgICBjb25zdCBtZXJnZUFycmF5QmxvY2tzID0gW107XHJcbiAgICBmb3IgKGxldCBtZXJnZURlZmluaXRpb24gb2YgbWVyZ2VzKSB7XHJcbiAgICAgICAgY29uc3QgbWVyZ2VMaW5lcyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IG1lcmdlVmFycyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IG5hbWVXb0V4dCBvZiBmaWxlTmFtZXMpIHtcclxuICAgICAgICAgICAgbWVyZ2VMaW5lcy5wdXNoKGBpbXBvcnQgeyR7bmFtZVdvRXh0fSR7bWVyZ2VEZWZpbml0aW9uLnN1ZmZpeH19IGZyb20gXCIuLyR7bmFtZVdvRXh0fVwiO2ApO1xyXG4gICAgICAgICAgICBtZXJnZVZhcnMucHVzaChgJHtuYW1lV29FeHR9JHttZXJnZURlZmluaXRpb24uc3VmZml4fWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtZXJnZUFycmF5QmxvY2tzLnB1c2goXHJcbiAgICAgICAgICAgIGBcclxuJHttZXJnZUxpbmVzLmpvaW4oXCJcXG5cIil9XHJcbmV4cG9ydCBjb25zdCAke21lcmdlRGVmaW5pdGlvbi5uYW1lfSA9IFske21lcmdlVmFycy5qb2luKFwiLCBcIil9XTtcclxuYC50cmltKClcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBgXHJcbiR7cmVleHBvcnRzfVxyXG5cclxuJHttZXJnZUFycmF5QmxvY2tzLmpvaW4oXCJcXG5cXG5cIil9XHJcbmAudHJpbSgpO1xyXG59XHJcbiJdfQ==