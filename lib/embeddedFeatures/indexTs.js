"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inprintIndexTs = inprintIndexTs;
exports.indexTsEmbeddedFeature = void 0;

var _fs = require("fs");

const indexTsEmbeddedFeature = {
  name: "IndexTs",
  description: `Generates reexport for each file inside directory. 
Use exclude:['name1','name2'] to exclude some files. 
Use merge:[{name:'MERGE_NAME', suffix:'MERGE_SUFFIX'}] to merge exported consts with specified MERGE_SUFFIX as an array into one variable MERGE_NAME`,
  func: inprintIndexTs
};
exports.indexTsEmbeddedFeature = indexTsEmbeddedFeature;

function inprintIndexTs(paramsObject) {
  if (!paramsObject.absolutePath.endsWith("/index.ts")) return undefined;
  const excludes = new Set([...((paramsObject === null || paramsObject === void 0 ? void 0 : paramsObject.excludes) || []), ...((paramsObject === null || paramsObject === void 0 ? void 0 : paramsObject.exclude) || []), ...((paramsObject === null || paramsObject === void 0 ? void 0 : paramsObject.excluding) || [])]);
  const merges = [...new Set([...((paramsObject === null || paramsObject === void 0 ? void 0 : paramsObject.merge) || [])])];
  excludes.add("index");
  const baseParts = paramsObject.absolutePath.split("/").slice(0, -1).join("/");
  const fileNames = [];

  for (let fileName of (0, _fs.readdirSync)(baseParts)) {
    const nameWoExt = fileName.split(".").slice(0, -1).join(".");
    if (!paramsObject.includeTests && nameWoExt.endsWith(".test")) continue;
    if (excludes.has(fileName) || excludes.has(nameWoExt)) continue;
    fileNames.push(nameWoExt);
  }

  fileNames.sort();
  const reexports = fileNames.map(f => `export * from "./${f}";`).join("\n");
  const mergeArrayBlocks = [];

  for (let mergeDefinition of merges) {
    const mergeLines = [];
    const mergeVars = [];

    for (let nameWoExt of fileNames) {
      mergeLines.push(`import {${nameWoExt}${mergeDefinition.suffix}} from "./${nameWoExt}";`);
      mergeVars.push(`${nameWoExt}${mergeDefinition.suffix}`);
    }

    mergeArrayBlocks.push(`
${mergeLines.join("\n")}
export const ${mergeDefinition.name} = [${mergeVars.join(", ")}];
`.trim());
  }

  return `
${reexports}

${mergeArrayBlocks.join("\n\n")}
`.trim();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbWJlZGRlZEZlYXR1cmVzL2luZGV4VHMudHMiXSwibmFtZXMiOlsiaW5kZXhUc0VtYmVkZGVkRmVhdHVyZSIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsImZ1bmMiLCJpbnByaW50SW5kZXhUcyIsInBhcmFtc09iamVjdCIsImFic29sdXRlUGF0aCIsImVuZHNXaXRoIiwidW5kZWZpbmVkIiwiZXhjbHVkZXMiLCJTZXQiLCJleGNsdWRlIiwiZXhjbHVkaW5nIiwibWVyZ2VzIiwibWVyZ2UiLCJhZGQiLCJiYXNlUGFydHMiLCJzcGxpdCIsInNsaWNlIiwiam9pbiIsImZpbGVOYW1lcyIsImZpbGVOYW1lIiwibmFtZVdvRXh0IiwiaW5jbHVkZVRlc3RzIiwiaGFzIiwicHVzaCIsInNvcnQiLCJyZWV4cG9ydHMiLCJtYXAiLCJmIiwibWVyZ2VBcnJheUJsb2NrcyIsIm1lcmdlRGVmaW5pdGlvbiIsIm1lcmdlTGluZXMiLCJtZXJnZVZhcnMiLCJzdWZmaXgiLCJ0cmltIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUdPLE1BQU1BLHNCQUF1QyxHQUFHO0FBQ25EQyxFQUFBQSxJQUFJLEVBQUMsU0FEOEM7QUFFbkRDLEVBQUFBLFdBQVcsRUFBRztBQUNsQjtBQUNBLHFKQUp1RDtBQUtuREMsRUFBQUEsSUFBSSxFQUFFQztBQUw2QyxDQUFoRDs7O0FBUUEsU0FBU0EsY0FBVCxDQUF3QkMsWUFBeEIsRUFBMkM7QUFDOUMsTUFBSSxDQUFDQSxZQUFZLENBQUNDLFlBQWIsQ0FBMEJDLFFBQTFCLENBQW1DLFdBQW5DLENBQUwsRUFBc0QsT0FBT0MsU0FBUDtBQUV0RCxRQUFNQyxRQUFRLEdBQUcsSUFBSUMsR0FBSixDQUFRLENBQ3JCLElBQUksQ0FBQUwsWUFBWSxTQUFaLElBQUFBLFlBQVksV0FBWixZQUFBQSxZQUFZLENBQUVJLFFBQWQsS0FBMEIsRUFBOUIsQ0FEcUIsRUFFckIsSUFBSSxDQUFBSixZQUFZLFNBQVosSUFBQUEsWUFBWSxXQUFaLFlBQUFBLFlBQVksQ0FBRU0sT0FBZCxLQUF5QixFQUE3QixDQUZxQixFQUdyQixJQUFJLENBQUFOLFlBQVksU0FBWixJQUFBQSxZQUFZLFdBQVosWUFBQUEsWUFBWSxDQUFFTyxTQUFkLEtBQTJCLEVBQS9CLENBSHFCLENBQVIsQ0FBakI7QUFNQSxRQUFNQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLElBQUlILEdBQUosQ0FBUSxDQUFDLElBQUksQ0FBQUwsWUFBWSxTQUFaLElBQUFBLFlBQVksV0FBWixZQUFBQSxZQUFZLENBQUVTLEtBQWQsS0FBdUIsRUFBM0IsQ0FBRCxDQUFSLENBQUosQ0FBZjtBQUVBTCxFQUFBQSxRQUFRLENBQUNNLEdBQVQsQ0FBYSxPQUFiO0FBQ0EsUUFBTUMsU0FBUyxHQUFHWCxZQUFZLENBQUNDLFlBQWIsQ0FBMEJXLEtBQTFCLENBQWdDLEdBQWhDLEVBQXFDQyxLQUFyQyxDQUEyQyxDQUEzQyxFQUE4QyxDQUFDLENBQS9DLEVBQWtEQyxJQUFsRCxDQUF1RCxHQUF2RCxDQUFsQjtBQUVBLFFBQU1DLFNBQVMsR0FBRyxFQUFsQjs7QUFDQSxPQUFLLElBQUlDLFFBQVQsSUFBcUIscUJBQVlMLFNBQVosQ0FBckIsRUFBNkM7QUFDekMsVUFBTU0sU0FBUyxHQUFHRCxRQUFRLENBQUNKLEtBQVQsQ0FBZSxHQUFmLEVBQW9CQyxLQUFwQixDQUEwQixDQUExQixFQUE2QixDQUFDLENBQTlCLEVBQWlDQyxJQUFqQyxDQUFzQyxHQUF0QyxDQUFsQjtBQUNBLFFBQUcsQ0FBQ2QsWUFBWSxDQUFDa0IsWUFBZCxJQUE4QkQsU0FBUyxDQUFDZixRQUFWLENBQW1CLE9BQW5CLENBQWpDLEVBQThEO0FBQzlELFFBQUlFLFFBQVEsQ0FBQ2UsR0FBVCxDQUFhSCxRQUFiLEtBQTBCWixRQUFRLENBQUNlLEdBQVQsQ0FBYUYsU0FBYixDQUE5QixFQUF1RDtBQUN2REYsSUFBQUEsU0FBUyxDQUFDSyxJQUFWLENBQWVILFNBQWY7QUFDSDs7QUFDREYsRUFBQUEsU0FBUyxDQUFDTSxJQUFWO0FBRUEsUUFBTUMsU0FBUyxHQUFHUCxTQUFTLENBQUNRLEdBQVYsQ0FBZUMsQ0FBRCxJQUFRLG9CQUFtQkEsQ0FBRSxJQUEzQyxFQUFnRFYsSUFBaEQsQ0FBcUQsSUFBckQsQ0FBbEI7QUFFQSxRQUFNVyxnQkFBZ0IsR0FBRyxFQUF6Qjs7QUFDQSxPQUFLLElBQUlDLGVBQVQsSUFBNEJsQixNQUE1QixFQUFvQztBQUNoQyxVQUFNbUIsVUFBVSxHQUFHLEVBQW5CO0FBQ0EsVUFBTUMsU0FBUyxHQUFHLEVBQWxCOztBQUNBLFNBQUssSUFBSVgsU0FBVCxJQUFzQkYsU0FBdEIsRUFBaUM7QUFDN0JZLE1BQUFBLFVBQVUsQ0FBQ1AsSUFBWCxDQUFpQixXQUFVSCxTQUFVLEdBQUVTLGVBQWUsQ0FBQ0csTUFBTyxhQUFZWixTQUFVLElBQXBGO0FBQ0FXLE1BQUFBLFNBQVMsQ0FBQ1IsSUFBVixDQUFnQixHQUFFSCxTQUFVLEdBQUVTLGVBQWUsQ0FBQ0csTUFBTyxFQUFyRDtBQUNIOztBQUNESixJQUFBQSxnQkFBZ0IsQ0FBQ0wsSUFBakIsQ0FDSztBQUNiLEVBQUVPLFVBQVUsQ0FBQ2IsSUFBWCxDQUFnQixJQUFoQixDQUFzQjtBQUN4QixlQUFlWSxlQUFlLENBQUM5QixJQUFLLE9BQU1nQyxTQUFTLENBQUNkLElBQVYsQ0FBZSxJQUFmLENBQXFCO0FBQy9ELENBSFksQ0FHVmdCLElBSFUsRUFESjtBQU1IOztBQUVELFNBQVE7QUFDWixFQUFFUixTQUFVO0FBQ1o7QUFDQSxFQUFFRyxnQkFBZ0IsQ0FBQ1gsSUFBakIsQ0FBc0IsTUFBdEIsQ0FBOEI7QUFDaEMsQ0FKVyxDQUlUZ0IsSUFKUyxFQUFQO0FBS0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWFkZGlyU3luYyB9IGZyb20gXCJmc1wiO1xyXG5pbXBvcnQgeyBFbWJlZGRlZEZlYXR1cmUgfSBmcm9tIFwiLi4vRW1iZWRkZWRGZWF0dXJlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaW5kZXhUc0VtYmVkZGVkRmVhdHVyZTogRW1iZWRkZWRGZWF0dXJlID0ge1xyXG4gICAgbmFtZTpcIkluZGV4VHNcIixcclxuICAgIGRlc2NyaXB0aW9uOiBgR2VuZXJhdGVzIHJlZXhwb3J0IGZvciBlYWNoIGZpbGUgaW5zaWRlIGRpcmVjdG9yeS4gXHJcblVzZSBleGNsdWRlOlsnbmFtZTEnLCduYW1lMiddIHRvIGV4Y2x1ZGUgc29tZSBmaWxlcy4gXHJcblVzZSBtZXJnZTpbe25hbWU6J01FUkdFX05BTUUnLCBzdWZmaXg6J01FUkdFX1NVRkZJWCd9XSB0byBtZXJnZSBleHBvcnRlZCBjb25zdHMgd2l0aCBzcGVjaWZpZWQgTUVSR0VfU1VGRklYIGFzIGFuIGFycmF5IGludG8gb25lIHZhcmlhYmxlIE1FUkdFX05BTUVgLFxyXG4gICAgZnVuYzogaW5wcmludEluZGV4VHMsXHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5wcmludEluZGV4VHMocGFyYW1zT2JqZWN0OiBhbnkpIHtcclxuICAgIGlmICghcGFyYW1zT2JqZWN0LmFic29sdXRlUGF0aC5lbmRzV2l0aChcIi9pbmRleC50c1wiKSkgcmV0dXJuIHVuZGVmaW5lZDtcclxuXHJcbiAgICBjb25zdCBleGNsdWRlcyA9IG5ldyBTZXQoW1xyXG4gICAgICAgIC4uLihwYXJhbXNPYmplY3Q/LmV4Y2x1ZGVzIHx8IFtdKSxcclxuICAgICAgICAuLi4ocGFyYW1zT2JqZWN0Py5leGNsdWRlIHx8IFtdKSxcclxuICAgICAgICAuLi4ocGFyYW1zT2JqZWN0Py5leGNsdWRpbmcgfHwgW10pLFxyXG4gICAgXSk7XHJcblxyXG4gICAgY29uc3QgbWVyZ2VzID0gWy4uLm5ldyBTZXQoWy4uLihwYXJhbXNPYmplY3Q/Lm1lcmdlIHx8IFtdKV0pXTtcclxuXHJcbiAgICBleGNsdWRlcy5hZGQoXCJpbmRleFwiKTtcclxuICAgIGNvbnN0IGJhc2VQYXJ0cyA9IHBhcmFtc09iamVjdC5hYnNvbHV0ZVBhdGguc3BsaXQoXCIvXCIpLnNsaWNlKDAsIC0xKS5qb2luKFwiL1wiKTtcclxuXHJcbiAgICBjb25zdCBmaWxlTmFtZXMgPSBbXTtcclxuICAgIGZvciAobGV0IGZpbGVOYW1lIG9mIHJlYWRkaXJTeW5jKGJhc2VQYXJ0cykpIHtcclxuICAgICAgICBjb25zdCBuYW1lV29FeHQgPSBmaWxlTmFtZS5zcGxpdChcIi5cIikuc2xpY2UoMCwgLTEpLmpvaW4oXCIuXCIpO1xyXG4gICAgICAgIGlmKCFwYXJhbXNPYmplY3QuaW5jbHVkZVRlc3RzICYmIG5hbWVXb0V4dC5lbmRzV2l0aChcIi50ZXN0XCIpKSBjb250aW51ZTtcclxuICAgICAgICBpZiAoZXhjbHVkZXMuaGFzKGZpbGVOYW1lKSB8fCBleGNsdWRlcy5oYXMobmFtZVdvRXh0KSkgY29udGludWU7XHJcbiAgICAgICAgZmlsZU5hbWVzLnB1c2gobmFtZVdvRXh0KTtcclxuICAgIH1cclxuICAgIGZpbGVOYW1lcy5zb3J0KCk7XHJcblxyXG4gICAgY29uc3QgcmVleHBvcnRzID0gZmlsZU5hbWVzLm1hcCgoZikgPT4gYGV4cG9ydCAqIGZyb20gXCIuLyR7Zn1cIjtgKS5qb2luKFwiXFxuXCIpO1xyXG5cclxuICAgIGNvbnN0IG1lcmdlQXJyYXlCbG9ja3MgPSBbXTtcclxuICAgIGZvciAobGV0IG1lcmdlRGVmaW5pdGlvbiBvZiBtZXJnZXMpIHtcclxuICAgICAgICBjb25zdCBtZXJnZUxpbmVzID0gW107XHJcbiAgICAgICAgY29uc3QgbWVyZ2VWYXJzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgbmFtZVdvRXh0IG9mIGZpbGVOYW1lcykge1xyXG4gICAgICAgICAgICBtZXJnZUxpbmVzLnB1c2goYGltcG9ydCB7JHtuYW1lV29FeHR9JHttZXJnZURlZmluaXRpb24uc3VmZml4fX0gZnJvbSBcIi4vJHtuYW1lV29FeHR9XCI7YCk7XHJcbiAgICAgICAgICAgIG1lcmdlVmFycy5wdXNoKGAke25hbWVXb0V4dH0ke21lcmdlRGVmaW5pdGlvbi5zdWZmaXh9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1lcmdlQXJyYXlCbG9ja3MucHVzaChcclxuICAgICAgICAgICAgYFxyXG4ke21lcmdlTGluZXMuam9pbihcIlxcblwiKX1cclxuZXhwb3J0IGNvbnN0ICR7bWVyZ2VEZWZpbml0aW9uLm5hbWV9ID0gWyR7bWVyZ2VWYXJzLmpvaW4oXCIsIFwiKX1dO1xyXG5gLnRyaW0oKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGBcclxuJHtyZWV4cG9ydHN9XHJcblxyXG4ke21lcmdlQXJyYXlCbG9ja3Muam9pbihcIlxcblxcblwiKX1cclxuYC50cmltKCk7XHJcbn1cclxuIl19