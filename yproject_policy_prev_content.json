{
    ".eslintignore": "# don't ever lint node_modules\r\nnode_modules\r\n# don't lint build output (make sure it's set to your correct build folder name)\r\ndist\r\nlib\r\n# don't lint nyc coverage output\r\ncoverage\r\n\r\nrollup.config.js\r\n",
    ".eslintrc.cjs": "const importantOnly = 0;\r\nconst excludeDocs = 1;\r\nconst keepDebug = 1;\r\n\r\nconst nonImportantWarning = !importantOnly ? 2 : 0;\r\nconst nonImportantError = !importantOnly ? 1 : 0;\r\n\r\nmodule.exports = {\r\n    root: true,\r\n    parser: \"@typescript-eslint/parser\",\r\n    plugins: [\"@typescript-eslint\", \"eslint-plugin-tsdoc\", \"jsdoc\", \"eslint-plugin-import\", \"sonarjs\"].filter((item) => typeof item === \"string\"),\r\n    extends: [\"eslint:recommended\", \"plugin:@typescript-eslint/recommended\", !importantOnly && \"plugin:sonarjs/recommended\", \"prettier\"].filter(\r\n        (item) => typeof item === \"string\",\r\n    ),\r\n    rules: {\r\n        \"no-undef\": 0,\r\n        \"no-prototype-builtins\": 0,\r\n        \"no-useless-escape\": 0,\r\n        \"no-empty\": 0,\r\n        \"no-constant-condition\": 0,\r\n        \"import/extensions\": [\r\n            \"error\",\r\n            \"ignorePackages\",\r\n            {\r\n                js: \"ignorePackages\",\r\n            },\r\n        ],\r\n        \"import/no-default-export\": 1,\r\n        \"@typescript-eslint/no-unused-vars\": 0,\r\n        \"@typescript-eslint/no-var-requires\": 0,\r\n        \"@typescript-eslint/explicit-module-boundary-types\": 0,\r\n        \"@typescript-eslint/ban-ts-comment\": 0,\r\n        \"@typescript-eslint/no-explicit-any\": 0,\r\n        \"@typescript-eslint/no-empty-interface\": 0,\r\n        \"@typescript-eslint/no-inferrable-types\": 0,\r\n        \"@typescript-eslint/no-non-null-assertion\": 0,\r\n        \"@typescript-eslint/no-empty-function\": 0,\r\n        \"@typescript-eslint/ban-types\": 0,\r\n        \"jsdoc/require-jsdoc\": excludeDocs ? 0 : nonImportantError,\r\n        \"jsdoc/require-description\": excludeDocs ? 0 : nonImportantError,\r\n        \"prefer-const\": 0,\r\n\r\n        \"tsdoc/syntax\": 1,\r\n        // \"require-jsdoc\": [\"error\", {\r\n        //     \"require\": {\r\n        //         \"FunctionDeclaration\": true,\r\n        //         \"MethodDefinition\": true,\r\n        //         \"ClassDeclaration\": true,\r\n        //         \"ArrowFunctionExpression\": false,\r\n        //         \"FunctionExpression\": false\r\n        //     }\r\n        // }],\r\n        \"sonarjs/cognitive-complexity\": 0,\r\n        \"sonarjs/no-redundant-jump\": 0,\r\n        \"sonarjs/no-small-switch\": 0,\r\n        \"sonarjs/no-unused-collection\": nonImportantError,\r\n        \"sonarjs/no-collapsible-if\": 0,\r\n        \"sonarjs/prefer-immediate-return\": 0,\r\n        \"no-debugger\": keepDebug ? 0 : nonImportantError,\r\n        \"@typescript-eslint/no-non-null-asserted-optional-chain\": 0,\r\n        \"sonarjs/no-one-iteration-loop\": 0,\r\n    },\r\n};\r\n",
    ".gitignore": "# Logs\r\nlogs\r\n*.log\r\nnpm-debug.log*\r\nyarn-debug.log*\r\nyarn-error.log*\r\nlerna-debug.log*\r\n\r\n# Diagnostic reports (https://nodejs.org/api/report.html)\r\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\r\n\r\n# Runtime data\r\npids\r\n*.pid\r\n*.seed\r\n*.pid.lock\r\n\r\n# Directory for instrumented libs generated by jscoverage/JSCover\r\nlib-cov\r\n\r\n# Coverage directory used by tools like istanbul\r\ncoverage\r\n*.lcov\r\n\r\n# nyc test coverage\r\n.nyc_output\r\n\r\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\r\n.grunt\r\n\r\n# Bower dependency directory (https://bower.io/)\r\nbower_components\r\n\r\n# node-waf configuration\r\n.lock-wscript\r\n\r\n# Compiled binary addons (https://nodejs.org/api/addons.html)\r\nbuild/Release\r\n\r\n# Dependency directories\r\nnode_modules/\r\njspm_packages/\r\n\r\n# TypeScript v1 declaration files\r\ntypings/\r\n\r\n# TypeScript cache\r\n*.tsbuildinfo\r\n\r\n# Optional npm cache directory\r\n.npm\r\n\r\n# Optional eslint cache\r\n.eslintcache\r\n\r\n# Microbundle cache\r\n.rpt2_cache/\r\n.rts2_cache_cjs/\r\n.rts2_cache_es/\r\n.rts2_cache_umd/\r\n\r\n# Optional REPL history\r\n.node_repl_history\r\n\r\n# Output of 'npm pack'\r\n*.tgz\r\n\r\n# Yarn Integrity file\r\n.yarn-integrity\r\n\r\n# dotenv environment variables file\r\n.env\r\n.env.test\r\n\r\n# parcel-bundler cache (https://parceljs.org/)\r\n.cache\r\n\r\n# Next.js build output\r\n.next\r\n\r\n# Nuxt.js build / generate output\r\n.nuxt\r\ndist\r\nlib\r\nnode_modules\r\n/temp\r\n/docs\r\n\r\n# Gatsby files\r\n.cache/\r\n# Comment in the public line in if your project uses Gatsby and *not* Next.js\r\n# https://nextjs.org/blog/next-9-1#public-directory-support\r\n# public\r\n# vuepress build output\r\n.vuepress/dist\r\n\r\n# Serverless directories\r\n.serverless/\r\n\r\n# FuseBox cache\r\n.fusebox/\r\n\r\n# DynamoDB Local files\r\n.dynamodb/\r\n\r\n# TernJS port file\r\n.tern-port\r\n\r\n\r\nprivate.json\r\nprivate.js\r\nprivate.cjs\r\nprivate.mjs\r\nprivate.ts\r\n\r\nsettings.json\r\nsettings.js\r\nsettings.cjs\r\n\r\n\r\n\r\nsettings.mjs\r\n\r\n\r\n\r\nsettings.ts\r\n\r\n\r\n\r\n/ts_out\r\n/yinstr_out\r\n/docs\r\n/out\r\n/ut_temp\r\ndistCompiled\r\n/ut_hasty2.db\r\n/src/AppIDE/server/domains_gen\r\n/src/AppIDE/server/domains_gen\r\n*.parser_log\r\n\r\n\r\n/.idea/workspace.xml\r\n",
    ".pnpmfile.cjs": "// Put this file into your projects hastyData.\n// This will enable yarn's you package.json/restrictions for common use cases (not all!) cases.\n//\n// Author: Yuri Yaryshev, Moscow, Russia\n//\n// Unlicense\n//\n// This is free and unencumbered software released into the dist domain.\n// Any use of this file is hereby granted.\n// No warranty or obligations of any kind are provided by author.\n// http://unlicense.org/\n\nlet path = require(\"path\");\nlet fs = require(\"fs\");\n\nlet packageJson = JSON.parse(fs.readFileSync(\"package.json\", \"utf-8\"));\nlet resolutions = packageJson.resolutions;\nif (packageJson.plainDependencies)\n    resolutions = Object.assign(packageJson.dependencies, packageJson.devDependencies, packageJson.resolutions);\n\nif (packageJson.noResolution) for (let nr of packageJson.noResolution) delete resolutions[nr];\n\nif (resolutions && packageJson.resolutionStr)\n    for (let k in resolutions) if (!packageJson.resolutionStr.includes(k)) delete resolutions[k];\n\nlet resolutionsArray = [];\nfor (let k in resolutions) {\n    const r = resolutions[k];\n    resolutionsArray.push(`    ${k} ${r}`);\n}\nconsole.log(`Using pnpmfile resolutions\\n\\t`, resolutionsArray.join(\"\\n\"));\n\ntry {\n    const { ymultirepoRemap } = require(\"../local_packages_list\");\n    module.exports = {\n        hooks: {\n            readPackage,\n        },\n    };\n\n    function readPackage(p, context) {\n        //console.log(`in readPackage\\n${JSON.stringify(p, undefined, '    ')}\\n\\n\\n`);\n        //console.log(`context\\n${JSON.stringify(context, undefined, '    ')}\\n\\n\\n`);\n        ymultirepoRemap(p, context);\n        //    if (p.dependencies)\n        //        for (let k in p.dependencies) {\n        //            const override = resolutions[k];\n        //            //console.log(`        MAYBE overriden dependency ${k} ${p.dependencies[k]} -> ${override}, ${override && p.dependencies[k] !== override}`);\n        //            if (override && p.dependencies[k] !== override) {\n        //                console.log(`        overriden dependency ${k} ${p.dependencies[k]} -> ${override}`);\n        //                p.dependencies[k] = override;\n        //            }\n        //        }\n        return p;\n    }\n} catch (e) {\n    if (e.code === \"MODULE_NOT_FOUND\" && e.message.includes(\"local_packages_list\")) {\n        console.warn(`.pnpmfile.cjs couldn't open local_packages_list - no hooks started!`);\n    } else console.error(e);\n    module.exports = {};\n}\n",
    "api-extractor.json": "/**\r\n * Config file for API Extractor.  For more info, please visit: https://api-extractor.com\r\n */\r\n{\r\n  \"$schema\": \"https://developer.microsoft.com/json-schemas/api-extractor/v7/api-extractor.schema.json\",\r\n\r\n  /**\r\n   * Optionally specifies another JSON config file that this file extends from.  This provides a way for\r\n   * standard settings to be shared across multiple projects.\r\n   *\r\n   * If the path starts with \"./\" or \"../\", the path is resolved relative to the folder of the file that contains\r\n   * the \"extends\" field.  Otherwise, the first path segment is interpreted as an NPM package name, and will be\r\n   * resolved using NodeJS require().\r\n   *\r\n   * SUPPORTED TOKENS: none\r\n   * DEFAULT VALUE: \"\"\r\n   */\r\n  // \"extends\": \"./shared/api-extractor-base.json\"\r\n  // \"extends\": \"my-package/include/api-extractor-base.json\"\r\n\r\n  /**\r\n   * Determines the \"<projectFolder>\" token that can be used with other config file settings.  The project folder\r\n   * typically contains the tsconfig.json and package.json config files, but the path is user-defined.\r\n   *\r\n   * The path is resolved relative to the folder of the config file that contains the setting.\r\n   *\r\n   * The default value for \"projectFolder\" is the token \"<lookup>\", which means the folder is determined by traversing\r\n   * parent folders, starting from the folder containing api-extractor.json, and stopping at the first folder\r\n   * that contains a tsconfig.json file.  If a tsconfig.json file cannot be found in this way, then an error\r\n   * will be reported.\r\n   *\r\n   * SUPPORTED TOKENS: <lookup>\r\n   * DEFAULT VALUE: \"<lookup>\"\r\n   */\r\n  // \"projectFolder\": \"..\",\r\n\r\n  /**\r\n   * (REQUIRED) Specifies the .d.ts file to be used as the starting point for analysis.  API Extractor\r\n   * analyzes the symbols exported by this module.\r\n   *\r\n   * The file extension must be \".d.ts\" and not \".ts\".\r\n   *\r\n   * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n   * prepend a folder token such as \"<projectFolder>\".\r\n   *\r\n   * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>\r\n   */\r\n  \"mainEntryPointFilePath\": \"<projectFolder>/lib/types/index.d.ts\",\r\n\r\n  /**\r\n   * A list of NPM package names whose exports should be treated as part of this package.\r\n   *\r\n   * For example, suppose that Webpack is used to generate a distributed bundle for the project \"library1\",\r\n   * and another NPM package \"library2\" is embedded in this bundle.  Some types from library2 may become part\r\n   * of the exported API for library1, but by default API Extractor would generate a .d.ts rollup that explicitly\r\n   * imports library2.  To avoid this, we can specify:\r\n   *\r\n   *   \"bundledPackages\": [ \"library2\" ],\r\n   *\r\n   * This would direct API Extractor to embed those types directly in the .d.ts rollup, as if they had been\r\n   * local files for library1.\r\n   */\r\n  \"bundledPackages\": [],\r\n\r\n  /**\r\n   * Determines how the TypeScript compiler engine will be invoked by API Extractor.\r\n   */\r\n  \"compiler\": {\r\n    /**\r\n     * Specifies the path to the tsconfig.json file to be used by API Extractor when analyzing the project.\r\n     *\r\n     * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n     * prepend a folder token such as \"<projectFolder>\".\r\n     *\r\n     * Note: This setting will be ignored if \"overrideTsconfig\" is used.\r\n     *\r\n     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>\r\n     * DEFAULT VALUE: \"<projectFolder>/tsconfig.json\"\r\n     */\r\n    // \"tsconfigFilePath\": \"<projectFolder>/tsconfig.json\",\r\n    /**\r\n     * Provides a compiler configuration that will be used instead of reading the tsconfig.json file from disk.\r\n     * The object must conform to the TypeScript tsconfig schema:\r\n     *\r\n     * http://json.schemastore.org/tsconfig\r\n     *\r\n     * If omitted, then the tsconfig.json file will be read from the \"projectFolder\".\r\n     *\r\n     * DEFAULT VALUE: no overrideTsconfig section\r\n     */\r\n    // \"overrideTsconfig\": {\r\n    //   . . .\r\n    // }\r\n    /**\r\n     * This option causes the compiler to be invoked with the --skipLibCheck option. This option is not recommended\r\n     * and may cause API Extractor to produce incomplete or incorrect declarations, but it may be required when\r\n     * dependencies contain declarations that are incompatible with the TypeScript engine that API Extractor uses\r\n     * for its analysis.  Where possible, the underlying issue should be fixed rather than relying on skipLibCheck.\r\n     *\r\n     * DEFAULT VALUE: false\r\n     */\r\n    // \"skipLibCheck\": true,\r\n  },\r\n\r\n  /**\r\n   * Configures how the API report file (*.api.md) will be generated.\r\n   */\r\n  \"apiReport\": {\r\n    /**\r\n     * (REQUIRED) Whether to generate an API report.\r\n     */\r\n    \"enabled\": true,\r\n    /**\r\n     * The filename for the API report files.  It will be combined with \"reportFolder\" or \"reportTempFolder\" to produce\r\n     * a full file path.\r\n     *\r\n     * The file extension should be \".api.md\", and the string should not contain a path separator such as \"\\\" or \"/\".\r\n     *\r\n     * SUPPORTED TOKENS: <packageName>, <unscopedPackageName>\r\n     * DEFAULT VALUE: \"<unscopedPackageName>.api.md\"\r\n     */\r\n    // \"reportFileName\": \"<unscopedPackageName>.api.md\",\r\n\r\n    /**\r\n     * Specifies the folder where the API report file is written.  The file name portion is determined by\r\n     * the \"reportFileName\" setting.\r\n     *\r\n     * The API report file is normally tracked by Git.  Changes to it can be used to trigger a branch policy,\r\n     * e.g. for an API review.\r\n     *\r\n     * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n     * prepend a folder token such as \"<projectFolder>\".\r\n     *\r\n     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>\r\n     * DEFAULT VALUE: \"<projectFolder>/etc/\"\r\n     */\r\n     \"reportFolder\": \"<projectFolder>/temp/\"\r\n\r\n    /**\r\n     * Specifies the folder where the temporary report file is written.  The file name portion is determined by\r\n     * the \"reportFileName\" setting.\r\n     *\r\n     * After the temporary file is written to disk, it is compared with the file in the \"reportFolder\".\r\n     * If they are different, a production build will fail.\r\n     *\r\n     * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n     * prepend a folder token such as \"<projectFolder>\".\r\n     *\r\n     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>\r\n     * DEFAULT VALUE: \"<projectFolder>/temp/\"\r\n     */\r\n    // \"reportTempFolder\": \"<projectFolder>/temp/\"\r\n  },\r\n\r\n  /**\r\n   * Configures how the doc model file (*.api.json) will be generated.\r\n   */\r\n  \"docModel\": {\r\n    /**\r\n     * (REQUIRED) Whether to generate a doc model file.\r\n     */\r\n    \"enabled\": true,\r\n\r\n    /**\r\n     * The output path for the doc model file.  The file extension should be \".api.json\".\r\n     *\r\n     * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n     * prepend a folder token such as \"<projectFolder>\".\r\n     *\r\n     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>\r\n     * DEFAULT VALUE: \"<projectFolder>/temp/<unscopedPackageName>.api.json\"\r\n     */\r\n    \"apiJsonFilePath\": \"<projectFolder>/temp/<unscopedPackageName>.api.json\"\r\n  },\r\n\r\n  /**\r\n   * Configures how the .d.ts rollup file will be generated.\r\n   */\r\n  \"dtsRollup\": {\r\n    /**\r\n     * (REQUIRED) Whether to generate the .d.ts rollup file.\r\n     */\r\n    \"enabled\": true\r\n\r\n    /**\r\n     * Specifies the output path for a .d.ts rollup file to be generated without any trimming.\r\n     * This file will include all declarations that are exported by the main entry point.\r\n     *\r\n     * If the path is an empty string, then this file will not be written.\r\n     *\r\n     * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n     * prepend a folder token such as \"<projectFolder>\".\r\n     *\r\n     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>\r\n     * DEFAULT VALUE: \"<projectFolder>/dist/<unscopedPackageName>.d.ts\"\r\n     */\r\n    // \"untrimmedFilePath\": \"<projectFolder>/dist/<unscopedPackageName>.d.ts\",\r\n\r\n    /**\r\n     * Specifies the output path for a .d.ts rollup file to be generated with trimming for a \"beta\" release.\r\n     * This file will include only declarations that are marked as \"@public\" or \"@beta\".\r\n     *\r\n     * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n     * prepend a folder token such as \"<projectFolder>\".\r\n     *\r\n     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>\r\n     * DEFAULT VALUE: \"\"\r\n     */\r\n    // \"betaTrimmedFilePath\": \"<projectFolder>/dist/<unscopedPackageName>-beta.d.ts\",\r\n\r\n    /**\r\n     * Specifies the output path for a .d.ts rollup file to be generated with trimming for a \"public\" release.\r\n     * This file will include only declarations that are marked as \"@public\".\r\n     *\r\n     * If the path is an empty string, then this file will not be written.\r\n     *\r\n     * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n     * prepend a folder token such as \"<projectFolder>\".\r\n     *\r\n     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>\r\n     * DEFAULT VALUE: \"\"\r\n     */\r\n    // \"publicTrimmedFilePath\": \"<projectFolder>/dist/<unscopedPackageName>-public.d.ts\",\r\n\r\n    /**\r\n     * When a declaration is trimmed, by default it will be replaced by a code comment such as\r\n     * \"Excluded from this release type: exampleMember\".  Set \"omitTrimmingComments\" to true to remove the\r\n     * declaration completely.\r\n     *\r\n     * DEFAULT VALUE: false\r\n     */\r\n    // \"omitTrimmingComments\": true\r\n  },\r\n\r\n  /**\r\n   * Configures how the tsdoc-metadata.json file will be generated.\r\n   */\r\n  \"tsdocMetadata\": {\r\n    /**\r\n     * Whether to generate the tsdoc-metadata.json file.\r\n     *\r\n     * DEFAULT VALUE: true\r\n     */\r\n    // \"enabled\": true,\r\n    /**\r\n     * Specifies where the TSDoc metadata file should be written.\r\n     *\r\n     * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n     * prepend a folder token such as \"<projectFolder>\".\r\n     *\r\n     * The default value is \"<lookup>\", which causes the path to be automatically inferred from the \"tsdocMetadata\",\r\n     * \"typings\" or \"main\" fields of the project's package.json.  If none of these fields are set, the lookup\r\n     * falls back to \"tsdoc-metadata.json\" in the package folder.\r\n     *\r\n     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>\r\n     * DEFAULT VALUE: \"<lookup>\"\r\n     */\r\n    // \"tsdocMetadataFilePath\": \"<projectFolder>/dist/tsdoc-metadata.json\"\r\n  },\r\n\r\n  /**\r\n   * Specifies what type of newlines API Extractor should use when writing output files.  By default, the output files\r\n   * will be written with Windows-style newlines.  To use POSIX-style newlines, specify \"lf\" instead.\r\n   * To use the OS's default newline kind, specify \"os\".\r\n   *\r\n   * DEFAULT VALUE: \"crlf\"\r\n   */\r\n  // \"newlineKind\": \"crlf\",\r\n\r\n  /**\r\n   * Configures how API Extractor reports error and warning messages produced during analysis.\r\n   *\r\n   * There are three sources of messages:  compiler messages, API Extractor messages, and TSDoc messages.\r\n   */\r\n  \"messages\": {\r\n    /**\r\n     * Configures handling of diagnostic messages reported by the TypeScript compiler engine while analyzing\r\n     * the input .d.ts files.\r\n     *\r\n     * TypeScript message identifiers start with \"TS\" followed by an integer.  For example: \"TS2551\"\r\n     *\r\n     * DEFAULT VALUE:  A single \"default\" entry with logLevel=warning.\r\n     */\r\n    \"compilerMessageReporting\": {\r\n      /**\r\n       * Configures the default routing for messages that don't match an explicit rule in this table.\r\n       */\r\n      \"default\": {\r\n        /**\r\n         * Specifies whether the message should be written to the the tool's output log.  Note that\r\n         * the \"addToApiReportFile\" property may supersede this option.\r\n         *\r\n         * Possible values: \"error\", \"warning\", \"none\"\r\n         *\r\n         * Errors cause the build to fail and return a nonzero exit code.  Warnings cause a production build fail\r\n         * and return a nonzero exit code.  For a non-production build (e.g. when \"api-extractor run\" includes\r\n         * the \"--local\" option), the warning is displayed but the build will not fail.\r\n         *\r\n         * DEFAULT VALUE: \"warning\"\r\n         */\r\n        \"logLevel\": \"warning\",\r\n\r\n        /**\r\n         * When addToApiReportFile is true:  If API Extractor is configured to write an API report file (.api.md),\r\n         * then the message will be written inside that file; otherwise, the message is instead logged according to\r\n         * the \"logLevel\" option.\r\n         *\r\n         * DEFAULT VALUE: false\r\n         */\r\n        \"addToApiReportFile\": true\r\n      }\r\n\r\n      // \"TS2551\": {\r\n      //   \"logLevel\": \"warning\",\r\n      //   \"addToApiReportFile\": true\r\n      // },\r\n      //\r\n      // . . .\r\n    },\r\n\r\n    /**\r\n     * Configures handling of messages reported by API Extractor during its analysis.\r\n     *\r\n     * API Extractor message identifiers start with \"ae-\".  For example: \"ae-extra-release-tag\"\r\n     *\r\n     * DEFAULT VALUE: See api-extractor-defaults.json for the complete table of extractorMessageReporting mappings\r\n     */\r\n    \"extractorMessageReporting\": {\r\n      \"default\": {\r\n        \"logLevel\": \"warning\",\r\n        \"addToApiReportFile\": true\r\n      }\r\n\r\n      // \"ae-extra-release-tag\": {\r\n      //   \"logLevel\": \"warning\",\r\n      //   \"addToApiReportFile\": true\r\n      // },\r\n      //\r\n      // . . .\r\n    },\r\n\r\n    /**\r\n     * Configures handling of messages reported by the TSDoc parser when analyzing code comments.\r\n     *\r\n     * TSDoc message identifiers start with \"tsdoc-\".  For example: \"tsdoc-link-tag-unescaped-text\"\r\n     *\r\n     * DEFAULT VALUE:  A single \"default\" entry with logLevel=warning.\r\n     */\r\n    \"tsdocMessageReporting\": {\r\n      \"default\": {\r\n        \"logLevel\": \"warning\"\r\n        // \"addToApiReportFile\": false\r\n      }\r\n\r\n      // \"tsdoc-link-tag-unescaped-text\": {\r\n      //   \"logLevel\": \"warning\",\r\n      //   \"addToApiReportFile\": true\r\n      // },\r\n      //\r\n      // . . .\r\n    }\r\n  }\r\n}\r\n",
    "babel.cjs.config.cjs": "const config = require(\"./babel.esm.config.cjs\");\nconfig.plugins.push(\"@babel/transform-modules-commonjs\");\nmodule.exports = config;\n",
    "babel.esm.config.cjs": "let fs = require(\"fs\");\nlet tsconf = eval(\"(()=>(\" + fs.readFileSync(\"tsconfig.json\", \"utf-8\") + \"))()\");\n\nlet aliases = {};\nfor (let k in tsconf.compilerOptions.paths) {\n    let v = tsconf.compilerOptions.paths[k];\n    aliases[k] = `./${v[0]}`; // /index.mjs`;\n}\n\nlet DEV_SETTINGS = {};\ntry {\n    DEV_SETTINGS = require(\"./DEV_SETTINGS.cjs\");\n} catch (e) {\n//    console.trace(`DEV_SETTINGS not loaded`, e.stack);\n}\nconst { DEV_BYPASS_AUTH } = DEV_SETTINGS;\n\nmodule.exports = {\n    presets: [],\n    plugins: [\n        [\n            \"inline-replace-variables\",\n            {\n                DEV_BYPASS_AUTH: DEV_BYPASS_AUTH,\n            },\n        ],\n        \"@babel/transform-typescript\",\n        [\n            \"@babel/plugin-proposal-decorators\",\n            { legacy: true },\n        ],\n        \"@babel/proposal-optional-chaining\",\n        \"@babel/proposal-class-properties\",\n        \"@babel/proposal-object-rest-spread\",\n        [\n            \"module-resolver\",\n            {\n                root: [\"./\"],\n                alias: aliases,\n            },\n        ],\n        // DON'T ADD @babel/transform-modules-commonjs here! It's added in babel.cjs.config.cjs!\n    ],\n};\n",
    "breaker_lib.cjs": "/* USAGES CHEATSHEET\r\n\r\n// ================================================\r\n// Break on same value\r\n\r\n// @ts-ignore\r\nBREAKER.onSame(VALUE_HERE);\r\n// ================================================\r\n// Break on saved value\r\n\r\n// @ts-ignore\r\nBREAKER.on(VALUE_HERE);\r\n// ================================================\r\n// Save the value\r\n\r\n// @ts-ignore\r\nBREAKER.save(VALUE_HERE);\r\n// ================================================\r\n// Log to console (just to separate this debug logs from other ones)\r\n\r\n// @ts-ignore\r\nBREAKER.log();\r\n// ================================================\r\n\r\n*/\r\n\r\n/*\r\nИдеи:\r\nTODO Делать вот так:\r\nimport {BREAKER_Lib} from \"../../breaker_lib\";\r\nconst BREAKER = BREAKER_Lib(__filename);\r\n\r\nЭто позволит внутри BREAKER'а делать функции, которые смотрят на файл\r\nTODO при этом нужно сохранить глобальность самого BREAKER'а\r\n\r\n*/\r\nconst fs = require('fs');\r\n\r\nfunction getTrace(n = 0) {\r\n    return (new Error(\"BREAKER_STACK\").stack + \"\")\r\n        .split(\"\\n\")\r\n        .splice(n + 3)\r\n        .join(\"\\n\");\r\n}\r\n\r\nfunction printCompareStack() {\r\n    console.log(`\\n\\n\\nPrev stack trace START\\n`);\r\n    console.log(pthis.prevStack);\r\n    console.log(`\\nPrev stack trace END. This stack trace START\\n`);\r\n    console.log(getTrace(1));\r\n    console.log(`\\nThis stack trace END\\n`);\r\n}\r\n\r\nfunction bufferToString(v) {\r\n    return new Uint8Array(v.slice()).join(\" \");\r\n}\r\n\r\nlet breaker_map = {\r\n    \"\": function createBreaker(instance = \"\") {\r\n        if (!breaker_map[instance]) breaker_map[instance] = {};\r\n        let pthis = Object.assign(breaker_map[instance], {\r\n            BREAKER: \"BREAKER\",\r\n            BREAKER_ENABLED: false,\r\n            prevValue: undefined,\r\n            prevStack: undefined,\r\n            save: function BREAKER_save(v) {\r\n                if (pthis.prevValue === undefined) {\r\n                    pthis.enable();\r\n                    pthis.prevValue = newValue;\r\n                    pthis.prevStack = getTrace();\r\n                }\r\n            },\r\n            on: function BREAKER_on(v) {\r\n                const newValue = JSON.stringify(v);\r\n                if (pthis.prevValue === newValue) {\r\n                    printCompareStack();\r\n                    debugger;\r\n                }\r\n            },\r\n            onSame: function BREAKER_onSame(v) {\r\n                const newValue = JSON.stringify(v);\r\n                if (pthis.prevValue === undefined) {\r\n                    pthis.enable();\r\n                    pthis.prevValue = newValue;\r\n                    pthis.prevStack = getTrace();\r\n                } else if (pthis.prevValue === newValue) {\r\n                    printCompareStack();\r\n                    debugger;\r\n                }\r\n            },\r\n            log: function BREAKER_log(...args) {\r\n                console.log(...args);\r\n            },\r\n            enable: function BREAKER_enable(...args) {\r\n                pthis.BREAKER_ENABLED = true;\r\n            },\r\n            enabled: function BREAKER_enabled(...args) {\r\n                if (pthis.BREAKER_ENABLED) debugger;\r\n            },\r\n            enabledOnce: function BREAKER_enabledOnce(...args) {\r\n                if (pthis.BREAKER_ENABLED) {\r\n                    debugger;\r\n                    pthis.disable();\r\n                }\r\n            },\r\n            disable: function BREAKER_disable(...args) {\r\n                pthis.BREAKER_ENABLED = false;\r\n            },\r\n        });\r\n    },\r\n};\r\n\r\nconst createBreaker = breaker_map[\"\"];\r\n\r\nglobal.BREAKER = Object.assign(createBreaker, createBreaker());\r\nglobal.BREAKER.bufferToFile = global.bufferToFile = function bufferToFile(filename, buffer) {\r\n    fs.writeFileSync(filename, buffer, 'binary');\r\n}\r\n\r\n//===== TEMP_DEBUG_CODE ================================================================================================\r\n// const BufferList = require('bl');\r\nlet dbgBufferLists = {};\r\n\r\nlet writtenOnce = false;\r\nglobal.BREAKER.buffer_dump = function buffer_dump(callerFilename, chunk, mode, offset) {\r\n    return;\r\n    const maxCheckLength = 200000;\r\n\r\n    if(!mode)\r\n        mode = \"empty\";\r\n\r\n    if(!dbgBufferLists[mode]) dbgBufferLists[mode] = Buffer.alloc(0);\r\n\r\n    if(dbgBufferLists[mode].length > (mode === \"source\"? 2: 1)* maxCheckLength)\r\n        return;\r\n\r\n\r\n    if(offset === undefined)\r\n        dbgBufferLists[mode] = Buffer.concat([dbgBufferLists[mode], chunk]);\r\n    else {\r\n        offset = Number(offset);\r\n        dbgBufferLists[mode] = Buffer.concat([dbgBufferLists[mode].slice(0,offset), chunk, dbgBufferLists[mode].slice(offset+chunk.length)]);\r\n    }\r\n\r\n    if(mode !== \"source\" && dbgBufferLists[\"source\"]) {\r\n        const myBuf = dbgBufferLists[mode];\r\n        const sourceBuf = dbgBufferLists[\"source\"].slice(0, myBuf.length);\r\n\r\n        if(Buffer.compare(myBuf, sourceBuf) !== 0) {\r\n            const n = myBuf.length;\r\n            for(let i=0; i<n; i++)\r\n                if(myBuf[i] !== sourceBuf[i]) {\r\n                    if(!writtenOnce) {\r\n                        writtenOnce = true;\r\n                        BREAKER.bufferToFile(`d:\\\\temp\\\\sourceBuf.txt`, dbgBufferLists[\"source\"]);\r\n                        BREAKER.bufferToFile(`d:\\\\temp\\\\myByf.txt`, myBuf);\r\n                    }\r\n                    debugger;\r\n                }\r\n        }\r\n    }\r\n\r\n    return;\r\n        let isFirstWriter = process.argv.join(\" \").includes(\"mocha\");\r\n        const fn = \"d:\\\\BREAKER_buffer_dump.txt\";\r\n\r\n        debugger;\r\n        return;\r\n\r\n        if (!pthis.dumped) {\r\n            if (!pthis.bl) pthis.bl = new BufferList();\r\n            pthis.bl.append(chunk);\r\n\r\n            const current = bufferToString(pthis.bl);\r\n            if (isFirstWriter) {\r\n                if (pthis.bl.length < 100000)\r\n                    require(\"fs\").writeFileSync(fn, current, \"utf-8\");\r\n            } else {\r\n                const etalon = require(\"fs\").readFileSync(fn, \"utf-8\");\r\n                if (!etalon.startsWith(current)) {\r\n                    console.log(`BREAKER_buffer_dump ${process.argv.join(\" \")} ${callerHint}`);\r\n                    console.log(`pthis \\n${current}\\n\\n`);\r\n                    for (let i = 0; i < current.length; i++) if (etalon[i] !== current[i]) debugger;\r\n                    debugger;\r\n                }\r\n            }\r\n\r\n            // if(pthis.bl.length > 70000) {\r\n            //     console.log(`BREAKER_buffer_dump ${process.argv.join(' ')} ${callerHint}`);\r\n            //     console.log(`BREAKER_buffer_dump \\n${(new Uint8Array(pthis.bl.slice(65400, 65700)).join(\" \"))}\\n\\n`);\r\n            //     pthis.dumped = true;\r\n            // }\r\n        }\r\n    };\r\n//======================================================================================================================\r\n",
    "build.bat": "npm run build",
    "clean.bat": "npm run clean",
    "clear.bat": "npm run clean",
    "deps.bat": "npm run deps",
    "dump_packages.js": "let fs = require(\"fs\");\nlet f = JSON.parse(fs.readFileSync(\"package.json\", \"utf-8\"));\n\nlet dd = Object.keys(f.dependencies);\n\nlet s =\n    \"\\nDump dependencies\\n\" +\n    dd.join(\" \") +\n    \"\\n\\n\\nnpm commands-1\\nnpm i \" +\n    dd.join(\" && npm i \") +\n    \"\\n\\n\\nnpm i commands-2\\nnpm i \" +\n    dd.join(\"\\nnpm i \") +\n    \"\\n\\n\";\nfs.writeFileSync(\"dump_packages.txt\", s, \"utf-8\");\n",
    "ecosystem.config.js": "// pm2 start ecosystem.config.js\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst { stringify } = require(\"javascript-stringify\");\nconst name = path.resolve(\".\").split(path.sep).pop();\n\nmodule.exports = {\n    apps: [\n        {\n            name,\n            script: \"./ts_out/src/start.js\",\n            env: {\n                NODE_ENV: \"development\",\n            },\n            env_production: {\n                NODE_ENV: \"production\",\n            },\n        },\n    ],\n};\n\nconsole.log(`pm2 - ecosystem.config.js loaded! name='${name}'\\n`, stringify(module.exports, undefined, \"    \"));\n",
    "inprint.cjs": "//        ...require(\"JSON5\").parse(require(\"fs\").readFileSync(\"package.json\", \"utf-8\"))?.prettier,\n\nlet inprint_main;\ntry {\n\tinprint_main = require(\"./lib/cjs/inprint/main.js\").inprint\n} catch(e) {\n\tinprint_main = ()=> undefined;\n\tconsole.warn(`CODE00000000 Couldn't open ./lib/cjs/inprint/main.js - if its not yet compiled - ignore this warning!`);\n}\n\nmodule.exports = {\n    files: [\"src/**/*.{ts,cts,mts,tsx,js,jsx,cjs,mjs}\"],\n    inprint: inprint_main,\n    embeddedFeatures: \"first\",\n    forceProcessTermination: true,\n    prettierOpts: { filepath: __dirname, ...require(\"JSON5\").parse(require(\"fs\").readFileSync(\"package.json\", \"utf-8\"))?.prettier, parser:\"typescript\"},\n};\n",
    "inprintDebug.js": "require(\"inprint\").run();\r\n",
    "jest.config-cjs.cjs": "module.exports = async () => {\r\n  return {\r\n\t\"rootDir\": \"lib/cjs\",\r\n\t\"testRegex\": \"(/__tests__/.*|\\\\.(test|spec))\\\\.(ts|tsx|jsx|js|cjs|mjs)$\",\r\n\t\"preset\": \"ts-jest\",\r\n\t\"resolver\": \"jest-ts-webcompat-resolver\"\r\n  };\r\n};\r\n",
    "jest.config-ts.cjs": "module.exports = async () => {\r\n  return {\r\n\t\"rootDir\": \"src\",\r\n\t\"testRegex\": \"(/__tests__/.*|\\\\.(test|spec))\\\\.(ts|tsx|jsx|js|cjs|mjs)$\",\r\n\t\"preset\": \"ts-jest\",\r\n\t\"resolver\": \"jest-ts-webcompat-resolver\"\r\n  };\r\n};",
    "jsconfig.json": "{\n    \"compilerOptions\": {\n        /* Basic Options */\n        \"incremental\": true /* Enable incremental compilation */,\n        \"target\": \"ES2015\" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,\n        \"module\": \"commonjs\" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,\n        // \"lib\": [],                             /* Specify library files to be included in the compilation. */\n        \"allowJs\": true /* Allow javascript files to be compiled. */,\n        \"checkJs\": false /* Report errors in .js files. */,\n        \"jsx\": \"react\" /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */,\n        \"declaration\": true /* Generates corresponding '.d.ts' file. */,\n        \"declarationMap\": true /* Generates a sourcemap for each corresponding '.d.ts' file. */,\n        \"sourceMap\": true /* Generates corresponding '.map' file. */,\n        // \"outFile\": \"./\",                       /* Concatenate and emit output to single file. */\n        \"declarationDir\": \"./lib/ts\",\n        \"outDir\": \"./lib/ts\" /* Redirect output structure to the directory. */,\n        // \"rootDir\": \"./\",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\n        // \"composite\": true,                     /* Enable project compilation */\n        //    \"tsBuildInfoFile\": \"./temp/ts_incemental\",               /* Specify file to store incremental compilation information */\n        // \"removeComments\": true,                /* Do not emit comments to output. */\n        // \"noEmit\": true,                        /* Do not emit outputs. */\n        \"importHelpers\": true /* Import emit helpers from 'tslib'. */,\n        // \"downlevelIteration\": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\n        \"isolatedModules\": true /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */,\n\n        /* Strict Type-Checking Options */\n        \"strict\": true /* Enable all strict type-checking options. */,\n        // \"noImplicitAny\": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */\n        // \"strictNullChecks\": true,              /* Enable strict null checks. */\n        // \"strictFunctionTypes\": true,           /* Enable strict checking of function types. */\n        // \"strictBindCallApply\": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */\n        // \"strictPropertyInitialization\": true,  /* Enable strict checking of property initialization in classes. */\n        // \"noImplicitThis\": true,                /* Raise error on 'this' expressions with an implied 'any' type. */\n        // \"alwaysStrict\": true,                  /* Parse in strict mode and emit \"use strict\" for each source file. */\n\n        /* Additional Checks */\n        // \"noUnusedLocals\": true,                /* Report errors on unused locals. */\n        // \"noUnusedParameters\": true,            /* Report errors on unused parameters. */\n        // \"noImplicitReturns\": true,             /* Report error when not all code paths in function return a value. */\n        // \"noFallthroughCasesInSwitch\": true,    /* Report errors for fallthrough cases in switch statement. */\n\n        /* Module Resolution Options */\n        \"moduleResolution\": \"node\" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,\n        // \"baseUrl\": \"./\",                       /* Base directory to resolve non-absolute module names. */\n        // \"paths\": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */\n        // \"rootDirs\": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */\n        // \"typeRoots\": [],                       /* List of folders to include type definitions from. */\n        // \"types\": [],                           /* Type declaration files to be included in compilation. */\n        // \"allowSyntheticDefaultImports\": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\n        \"esModuleInterop\": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,\n        // \"preserveSymlinks\": true,              /* Do not resolve the real path of symlinks. */\n        // \"allowUmdGlobalAccess\": true,          /* Allow accessing UMD globals from modules. */\n\n        /* Source Map Options */\n        //\"sourceRoot\": \"src\",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */\n        // \"mapRoot\": \"\",                         /* Specify the location where debugger should locate map files instead of generated locations. */\n        // \"inlineSourceMap\": true,               /* Emit a single file with source maps instead of having a separate file. */\n        // \"inlineSources\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\n\n        /* Experimental Options */\n        // \"experimentalDecorators\": true,        /* Enables experimental support for ES7 decorators. */\n        // \"emitDecoratorMetadata\": true,         /* Enables experimental support for emitting type metadata for decorators. */\n\n        /* Advanced Options */\n        \"forceConsistentCasingInFileNames\": true /* Disallow inconsistently-cased references to the same file. */\n    },\n    \"include\": [\"src/**/*\"]\n}\n",
    "mywins.bat": "my_wins",
    "nodemon.json": "{\r\n  \"restartable\": \"rs\",\r\n  \"ignore\": [\r\n    \".git\",\r\n    \"node_modules/**/node_modules\"\r\n  ],\r\n  \"verbose\": false,\r\n  \"events\": {\r\n    \"restart\": \"osascript -e 'display notification \\\"App restarted due to:\\n'$FILENAME'\\\" with title \\\"nodemon\\\"'\"\r\n  },\r\n  \"watch\": [\r\n    \"lib/cjs/server\"\r\n  ],\r\n  \"env\": {\r\n    \"NODE_ENV\": \"development\"\r\n  },\r\n  \"ext\": \"js,json\"\r\n}\r\n",
    "package_precommit_prepush_hooks.txt": "",
    "precompile.bat": "npm run precompile",
    "prettier.config.cjs": "module.exports = {\r\n    tabWidth: 4,\r\n    printWidth: 150,\r\n    trailingComma: \"all\",\r\n};\r\n",
    "reinstall_node_modules.bat": "cls\r\nrm -rf node_modules\r\nrm -rf pnpm-lock.yaml\r\nrmdir node_modules /Q /S\r\ndel pnpm-lock.yaml\r\npnpm i",
    "republish.bat": "npm run republish",
    "start.bat": "npm run start",
    "test.bat": "npm run test",
    "tsconfig-declarations.json": "{\r\n    \"compilerOptions\": {\r\n        /* Basic Options */\r\n        \"incremental\": false /* Enable incremental compilation */,\r\n        \"target\": \"ESNEXT\" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,\r\n        \"module\": \"ESNEXT\" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,\r\n        // \"lib\": [],                             /* Specify library files to be included in the compilation. */\r\n        \"allowJs\": true /* Allow javascript files to be compiled. */,\r\n        \"checkJs\": false /* Report errors in .js files. */,\r\n        \"jsx\": \"react\" /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */,\r\n        \"declaration\": true /* Generates corresponding '.d.ts' file. */,\r\n        \"declarationMap\": true /* Generates a sourcemap for each corresponding '.d.ts' file. */,\r\n        \"sourceMap\": true /* Generates corresponding '.map' file. */,\r\n        // \"outFile\": \"./\",                       /* Concatenate and emit output to single file. */\r\n        \"declarationDir\": \"./lib/types\",\r\n        \"outDir\": \"./lib/types\" /* Redirect output structure to the directory. */,\r\n        // \"rootDir\": \"./\",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\r\n        // \"composite\": true,                     /* Enable project compilation */\r\n        //    \"tsBuildInfoFile\": \"./temp/ts_incemental\",               /* Specify file to store incremental compilation information */\r\n        // \"removeComments\": true,                /* Do not emit comments to output. */\r\n        // \"noEmit\": true,                        /* Do not emit outputs. */\r\n        \"importHelpers\": true /* Import emit helpers from 'tslib'. */,\r\n        // \"downlevelIteration\": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\r\n        \"isolatedModules\": true /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */,\r\n\r\n        /* Strict Type-Checking Options */\r\n        \"strict\": true /* Enable all strict type-checking options. */,\r\n        // \"noImplicitAny\": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */\r\n        // \"strictNullChecks\": true,              /* Enable strict null checks. */\r\n        // \"strictFunctionTypes\": true,           /* Enable strict checking of function types. */\r\n        // \"strictBindCallApply\": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */\r\n        // \"strictPropertyInitialization\": true,  /* Enable strict checking of property initialization in classes. */\r\n        // \"noImplicitThis\": true,                /* Raise error on 'this' expressions with an implied 'any' type. */\r\n        // \"alwaysStrict\": true,                  /* Parse in strict mode and emit \"use strict\" for each source file. */\r\n\r\n        /* Additional Checks */\r\n        // \"noUnusedLocals\": true,                /* Report errors on unused locals. */\r\n        // \"noUnusedParameters\": true,            /* Report errors on unused parameters. */\r\n        // \"noImplicitReturns\": true,             /* Report error when not all code paths in function return a value. */\r\n        // \"noFallthroughCasesInSwitch\": true,    /* Report errors for fallthrough cases in switch statement. */\r\n\r\n        /* Module Resolution Options */\r\n        \"moduleResolution\": \"node\" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,\r\n        // \"baseUrl\": \"./\",                       /* Base directory to resolve non-absolute module names. */\r\n        // \"paths\": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */\r\n        // \"rootDirs\": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */\r\n        // \"typeRoots\": [],                       /* List of folders to include type definitions from. */\r\n        // \"types\": [],                           /* Type declaration files to be included in compilation. */\r\n        // \"allowSyntheticDefaultImports\": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\r\n        \"esModuleInterop\": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,\r\n        // \"preserveSymlinks\": true,              /* Do not resolve the real path of symlinks. */\r\n        // \"allowUmdGlobalAccess\": true,          /* Allow accessing UMD globals from modules. */\r\n\r\n        /* Source Map Options */\r\n        //\"sourceRoot\": \"src\",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */\r\n        // \"mapRoot\": \"\",                         /* Specify the location where debugger should locate map files instead of generated locations. */\r\n        // \"inlineSourceMap\": true,               /* Emit a single file with source maps instead of having a separate file. */\r\n        // \"inlineSources\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\r\n\r\n        /* Experimental Options */\r\n        // \"experimentalDecorators\": true,        /* Enables experimental support for ES7 decorators. */\r\n        // \"emitDecoratorMetadata\": true,         /* Enables experimental support for emitting type metadata for decorators. */\r\n\r\n        /* Advanced Options */\r\n        \"forceConsistentCasingInFileNames\": true /* Disallow inconsistently-cased references to the same file. */,\r\n        \"emitDeclarationOnly\": true\r\n    },\r\n    \"include\": [\"src/**/*\"]\r\n}\r\n",
    "tsconfig.json": "{\r\n    \"compilerOptions\": {\r\n        /* Basic Options */\r\n        \"incremental\": true /* Enable incremental compilation */,\r\n        \"target\": \"ES2015\" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,\r\n        \"module\": \"commonjs\" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,\r\n        // \"lib\": [],                             /* Specify library files to be included in the compilation. */\r\n        \"allowJs\": true /* Allow javascript files to be compiled. */,\r\n        \"checkJs\": false /* Report errors in .js files. */,\r\n        \"jsx\": \"react\" /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */,\r\n        \"declaration\": true /* Generates corresponding '.d.ts' file. */,\r\n        \"declarationMap\": true /* Generates a sourcemap for each corresponding '.d.ts' file. */,\r\n        \"sourceMap\": true /* Generates corresponding '.map' file. */,\r\n        // \"outFile\": \"./\",                       /* Concatenate and emit output to single file. */\r\n        \"declarationDir\": \"./lib/ts\",\r\n        \"outDir\": \"./lib/ts\" /* Redirect output structure to the directory. */,\r\n        // \"rootDir\": \"./\",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\r\n        // \"composite\": true,                     /* Enable project compilation */\r\n        //    \"tsBuildInfoFile\": \"./temp/ts_incemental\",               /* Specify file to store incremental compilation information */\r\n        // \"removeComments\": true,                /* Do not emit comments to output. */\r\n        // \"noEmit\": true,                        /* Do not emit outputs. */\r\n        \"importHelpers\": true /* Import emit helpers from 'tslib'. */,\r\n        // \"downlevelIteration\": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\r\n        \"isolatedModules\": true /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */,\r\n\r\n        /* Strict Type-Checking Options */\r\n        \"strict\": true /* Enable all strict type-checking options. */,\r\n        // \"noImplicitAny\": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */\r\n        // \"strictNullChecks\": true,              /* Enable strict null checks. */\r\n        // \"strictFunctionTypes\": true,           /* Enable strict checking of function types. */\r\n        // \"strictBindCallApply\": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */\r\n        // \"strictPropertyInitialization\": true,  /* Enable strict checking of property initialization in classes. */\r\n        // \"noImplicitThis\": true,                /* Raise error on 'this' expressions with an implied 'any' type. */\r\n        // \"alwaysStrict\": true,                  /* Parse in strict mode and emit \"use strict\" for each source file. */\r\n\r\n        /* Additional Checks */\r\n        // \"noUnusedLocals\": true,                /* Report errors on unused locals. */\r\n        // \"noUnusedParameters\": true,            /* Report errors on unused parameters. */\r\n        // \"noImplicitReturns\": true,             /* Report error when not all code paths in function return a value. */\r\n        // \"noFallthroughCasesInSwitch\": true,    /* Report errors for fallthrough cases in switch statement. */\r\n\r\n        /* Module Resolution Options */\r\n        \"moduleResolution\": \"node\" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,\r\n        // \"baseUrl\": \"./\",                       /* Base directory to resolve non-absolute module names. */\r\n        // \"paths\": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */\r\n        // \"rootDirs\": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */\r\n        // \"typeRoots\": [],                       /* List of folders to include type definitions from. */\r\n        // \"types\": [],                           /* Type declaration files to be included in compilation. */\r\n        // \"allowSyntheticDefaultImports\": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\r\n        \"esModuleInterop\": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,\r\n        // \"preserveSymlinks\": true,              /* Do not resolve the real path of symlinks. */\r\n        // \"allowUmdGlobalAccess\": true,          /* Allow accessing UMD globals from modules. */\r\n\r\n        /* Source Map Options */\r\n        //\"sourceRoot\": \"src\",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */\r\n        // \"mapRoot\": \"\",                         /* Specify the location where debugger should locate map files instead of generated locations. */\r\n        // \"inlineSourceMap\": true,               /* Emit a single file with source maps instead of having a separate file. */\r\n        // \"inlineSources\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\r\n\r\n        /* Experimental Options */\r\n        // \"experimentalDecorators\": true,        /* Enables experimental support for ES7 decorators. */\r\n        // \"emitDecoratorMetadata\": true,         /* Enables experimental support for emitting type metadata for decorators. */\r\n\r\n        /* Advanced Options */\r\n        \"forceConsistentCasingInFileNames\": true /* Disallow inconsistently-cased references to the same file. */\r\n    },\r\n    \"include\": [\"src/**/*\"]\r\n}\r\n",
    "tsdoc.json": "{\r\n  \"$schema\": \"https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json\",\r\n  \"extends\": [ \"@microsoft/api-extractor/extends/tsdoc-base.json\" ],\r\n  \"tagDefinitions\": [\r\n    {\r\n      \"tagName\": \"@notImplemented\",\r\n      \"syntaxKind\": \"block\",\r\n      \"allowMultiple\": true\r\n    }\r\n  ],\r\n  \"supportForTags\": {\r\n    \"@notImplemented\": true\r\n  }\r\n}",
    "watch.bat": "@echo off\nset PATH=%PATH%;node_modules\\.bin\nset my_drive=%~d0\nset my_path=%~dp0\n%my_drive%\ncd %my_path%\nstart C:\\Windows\\System32\\cmd.exe /k \"npm run watch:cjs\"\nstart C:\\Windows\\System32\\cmd.exe /k \"npm run watch:types\"\nstart C:\\Windows\\System32\\cmd.exe /k \"npm run watch:esm\"\n\n",
    "watch_cjs.bat": "npm run watch:cjs",
    "watch_test_cjs.bat": "npm run watch:test:cjs",
    "webpack.react.config.js": "const path = require(\"path\");\nconst fs = require(\"fs\");\nconst webpack = require(\"webpack\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst CleanWebpackPlugin = require(\"clean-webpack-plugin\").CleanWebpackPlugin;\n\nconst pathes = (() => {\n    const proj = path.resolve(__dirname);\n    const projParts = proj.split(path.sep);\n    const projName = projParts[projParts.length - 1];\n    const root = path.resolve(__dirname, \"\");\n\n    return {\n        root,\n        proj,\n        projName,\n        dist: path.resolve(proj, \"dist\"),\n        distCompiled: path.resolve(proj, \"distCompiled\", projName),\n    };\n})();\n\nfor (let k in pathes) console.log(`pathes.${k} = ${pathes[k]}`);\n\n// Based on:\n// https://github.com/gaearon/react-hot-loader\n// https://github.com/gaearon/react-hot-loader/blob/master/examples/typescript/webpack.config.babel.js\n\nconst NODE_ENV = \"development\";\n\nlet BUILD_DATE = new Date();\nBUILD_DATE.setTime(BUILD_DATE.getTime() + 3 * 60 * 60 * 1000);\nBUILD_DATE = JSON.stringify(BUILD_DATE);\nBUILD_DATE = BUILD_DATE.substr(1, 10) + \" \" + BUILD_DATE.substr(12, 8);\n\nconsole.log(\"\");\nconsole.log(\"BUILD_DATE = \" + BUILD_DATE);\nconsole.log(\"\");\n\nlet package_json;\nlet manifest_json;\n\npackage_json = JSON.parse(fs.readFileSync(path.resolve(pathes.root, \"package.json\"), { encoding: \"utf-8\" }));\nmanifest_json = JSON.parse(fs.readFileSync(path.resolve(pathes.dist, \"manifest.json\"), { encoding: \"utf-8\" }));\nlet tsconf = eval(\"(()=>(\" + fs.readFileSync(\"tsconfig.json\", \"utf-8\") + \"))()\");\n\nlet moduleAliases = {};\nfor (let k in tsconf.compilerOptions.paths) {\n    let v = tsconf.compilerOptions.paths[k];\n    moduleAliases[k] = path.resolve(pathes.root, \"ts_out\", v[0]);\n}\n\nlet excludedModules = [\n    \"fs\",\n    \"sql-prettier\",\n    \"prettier\",\n    \"express\",\n    \"socket.io\",\n    \"better-sqlite3\",\n    \"sqlite3\",\n    \"child_process\",\n];\n\nmodule.exports = {\n    // TODO REMOVED ON 2020-13-11\n    // node: {\n    //     fs: \"empty\",\n    //     child_process: \"empty\",\n    // },\n    mode: \"development\",\n    entry: [path.resolve(pathes.proj, \"src/client/indexSmall.tsx\")],\n    devtool: \"inline-source-map\",\n    devServer: {\n        contentBase: \"./dist\",\n        hot: true,\n    },\n    resolve: {\n        fallback: {\n            crypto: false,\n            fs: false,\n            child_process: false,\n            path: false,\n            constants: false,\n            util: false,\n            assert: false,\n            stream: false,\n            //            crypto: require.resolve(\"crypto-browserify\"),\n            //            fs:null,\n        },\n        //        root:               path.join(pathes.proj, 'js'),\n        //        modulesDirectories: ['node_modules'],\n        extensions: [\".ts\", \".tsx\", \".js\", \".jsx\"],\n        alias: {\n            \"react-dom\": \"@hot-loader/react-dom\",\n            ...moduleAliases,\n        },\n    },\n    output: {\n        path: pathes.distCompiled,\n        filename: \"bundle.js\",\n    },\n    module: {\n        rules: [\n            {\n                test: (modulePath0) => {\n                    let modulePath = modulePath0.split(path.sep);\n                    for (let excludedModule of excludedModules) if (modulePath.includes(excludedModule)) return true;\n                    return false;\n                },\n                use: \"null-loader\",\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    \"style-loader\", // creates style nodes from JS strings\n                    \"css-loader\", // translates CSS into CommonJS\n                ],\n            },\n            {\n                test: /\\.scss$/,\n                use: [\n                    \"style-loader\", // creates style nodes from JS strings\n                    \"css-loader\", // translates CSS into CommonJS\n                    \"sass-loader\", // compiles Sass to CSS, using Node Sass by default\n                ],\n            },\n            {\n                test: /\\.(j|t)sx?$/,\n                exclude: /node_modules/,\n                use: {\n                    loader: \"babel-loader\",\n                    options: {\n                        cacheDirectory: true,\n                        babelrc: false,\n                        presets: [\"@babel/preset-typescript\", \"@babel/preset-react\"],\n                        plugins: [\n                            [\"@babel/plugin-proposal-decorators\", { legacy: true }],\n                            \"@babel/proposal-optional-chaining\",\n                            [\"@babel/proposal-class-properties\", { legacy: true }],\n                            \"@babel/proposal-object-rest-spread\",\n                            \"react-hot-loader/babel\",\n                            [\n                                \"module-resolver\",\n                                {\n                                    root: [\"./\"],\n                                    alias: moduleAliases,\n                                },\n                            ],\n                            // \"@babel/transform-modules-commonjs\",\n                        ],\n                    },\n                },\n            },\n        ],\n    },\n    plugins: [\n        new webpack.DefinePlugin({\n            BROWSER: \"true\",\n            \"process.env.BROWSER\": \"true\",\n            NODE_ENV: JSON.stringify(NODE_ENV),\n            BUILD_DATE: JSON.stringify(BUILD_DATE),\n            //             BASE_URL:JSON.stringify(private_js ? private_js.url : 'http://localhost')\n        }),\n        new CleanWebpackPlugin(),\n        //        new webpack.NamedModulesPlugin(), // TODO REMOVED ON 2020-13-11\n        new HtmlWebpackPlugin({ title: manifest_json.name }),\n        new webpack.HotModuleReplacementPlugin(),\n    ],\n    //\twatchOptions : {\n    //\t\taggregateTimeout : 300\n    //\t},\n    // \"cheap-inline-module-source-map\"\n};\n\n// console.log('YYAWEBPACK', JSON.stringify(module.exports.resolve.alias,null, \"\\t\"));\n",
    "package.json": "{\n    \"name\": \"inprint\",\n    \"version\": \"1.2.13\",\n    \"keywords\": [\n        \"generator\",\n        \"precompiler\",\n        \"inprint\",\n        \"inprinter\"\n    ],\n    \"description\": \"A very simple precompiler written in typescript. With it you can make a dynamically generated blocks in your code.\",\n    \"author\": \"Yuri Yaryshev\",\n    \"main\": \"lib/cjs/index.js\",\n    \"module\": \"lib/esm/index.js\",\n    \"exports\": {\n        \".\": {\n            \"import\": \"./lib/mjs/index.js\",\n            \"require\": \"./lib/cjs/index.js\"\n        }\n    },\n    \"typings\": \"lib/types/index.d.ts\",\n    \"homepage\": \"https://github.com/yuyaryshev/inprint\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/yuyaryshev/inprint\"\n    },\n    \"license\": \"Unlicense\",\n    \"publishConfig\": {\n        \"registry\": \"http://registry.npmjs.org\"\n    },\n    \"jest\": {\n        \"rootDir\": \"src\",\n        \"testRegex\": \"(/__tests__/.*|\\\\.(test|spec))\\\\.(ts|tsx|js)$\",\n        \"preset\": \"ts-jest\",\n        \"resolver\": \"jest-ts-webcompat-resolver\"\n    },\n    \"scripts\": {\n        \"test\": \"jest --config=jest.config-ts.cjs --passWithNoTests\",\n        \"build\": \"npm run precompile_full && npm run clean && npm run build:esm && npm run build:cjs && npm run build:types && npm run lint && npm run test && npm run build:docs\",\n        \"tsc\": \"npm run build:ts\",\n        \"republish\": \"npm run build && npx version-select && yb genprojmeta && npm publish\",\n        \"precompile\": \"inprint && ycplmon2 fix src && eslint src --fix --quiet\",\n        \"precompile_full\": \"npm run precompile && prettier src --write\",\n        \"clean:cjs\": \"yb clean_cjs\",\n        \"build:cjs\": \"npm run clean:cjs && babel src --config-file ./babel.cjs.config.cjs --out-dir lib/cjs --extensions \\\".ts,.tsx,.js,.jsx\\\" --source-maps \",\n        \"watch:cjs\": \"npm run clean:cjs && babel src --config-file ./babel.cjs.config.cjs --out-dir lib/cjs --extensions \\\".ts,.tsx,.js,.jsx\\\" --source-maps -w\",\n        \"clean:esm\": \"yb clean_esm\",\n        \"build:esm\": \"npm run clean:esm && babel src --config-file ./babel.esm.config.cjs --out-dir lib/esm --extensions \\\".ts,.tsx,.js,.jsx\\\" --source-maps \",\n        \"watch:esm\": \"npm run clean:esm && babel src --config-file ./babel.esm.config.cjs --out-dir lib/esm --extensions \\\".ts,.tsx,.js,.jsx\\\" --source-maps -w\",\n        \"clean:types\": \"yb clean_types\",\n        \"build:types\": \"npm run clean:types && tsc -p tsconfig-declarations.json\",\n        \"watch:types\": \"npm run clean:types && tsc -p tsconfig-declarations.json -w\",\n        \"clear:docs\": \"yb clean_docs\",\n        \"build:docs\": \"api-extractor run --local && api-documenter markdown --input-folder temp --output-folder docs\",\n        \"clean:ts\": \"yb clean_ts\",\n        \"build:ts\": \"npm run clean:ts && tsc\",\n        \"lint\": \"npx eslint . --ext .js,.jsx,.ts,.tsx\",\n        \"deps\": \"echo Finding loops in .js requires... & del deps.png & madge dist -c -i deps.png && deps.png\",\n        \"deps_all\": \"echo Generating full .js requires tree... & del deps.png & madge dist -i deps.png && deps.png\",\n        \"deps_orphans\": \"echo Finding orphans .js requires... & del deps.png & madge dist --orphans -i deps.png && deps.png\",\n        \"clean\": \"yb clean_all && npm run clear:docs\",\n        \"watch:test:cjs\": \"npm run build:cjs && jest --config=jest.config-cjs.cjs --passWithNoTests -w\",\n        \"test:cjs\": \"npm run build:cjs && jest --config=jest.config-cjs.cjs --passWithNoTests\",\n        \"test:ts\": \"jest --config=jest.config-ts.cjs --passWithNoTests\",\n        \"start\": \"node lib/cjs/start.js\"\n    },\n    \"devDependencies\": {\n        \"@babel/cli\": \"7.14.3\",\n        \"@babel/core\": \"7.14.3\",\n        \"@babel/node\": \"^7.14.2\",\n        \"@babel/parser\": \"7.14.4\",\n        \"@babel/plugin-proposal-class-properties\": \"^7.13.0\",\n        \"@babel/plugin-proposal-decorators\": \"^7.14.2\",\n        \"@babel/plugin-proposal-object-rest-spread\": \"^7.14.4\",\n        \"@babel/plugin-proposal-optional-chaining\": \"7.14.2\",\n        \"@babel/plugin-transform-modules-commonjs\": \"^7.14.0\",\n        \"@babel/plugin-transform-typescript\": \"^7.14.4\",\n        \"babel-loader\": \"^8.2.2\",\n        \"babel-plugin-inline-replace-variables\": \"^1.3.1\",\n        \"babel-plugin-module-resolver\": \"^4.1.0\",\n        \"babel-watch\": \"^7.4.1\",\n        \"jest\": \"^27.0.4\",\n        \"prettier\": \"^2.3.1\",\n        \"typescript\": \"^4.3.2\",\n        \"@microsoft/api-documenter\": \"^7.13.16\",\n        \"@microsoft/api-extractor\": \"^7.16.1\",\n        \"sinon\": \"^11.1.1\",\n        \"@types/sinon\": \"^10.0.2\",\n        \"@types/jest\": \"^26.0.23\",\n        \"@typescript-eslint/eslint-plugin\": \"^4.26.0\",\n        \"@typescript-eslint/parser\": \"^4.26.0\",\n        \"eslint\": \"^7.28.0\",\n        \"eslint-config-prettier\": \"^8.3.0\",\n        \"eslint-plugin-import\": \"^2.23.4\",\n        \"eslint-plugin-jsdoc\": \"^35.1.2\",\n        \"eslint-plugin-sonarjs\": \"^0.7.0\",\n        \"eslint-plugin-tsdoc\": \"^0.2.14\",\n        \"inprint\": \"^1.2.12\",\n        \"javascript-stringify\": \"^2.1.0\",\n        \"ts-jest\": \"^27.0.2\",\n        \"jest-ts-webcompat-resolver\": \"^1.0.0\",\n        \"json5\": \"^2.2.0\",\n        \"pretty-quick\": \"^3.1.0\",\n        \"tslib\": \"^2.2.0\",\n        \"cross-env\": \"^7.0.3\",\n        \"modify-filepath\": \"^0.0.2\"\n    },\n    \"peerDependencies\": {\n        \"prettier\": \"2.2.1\"\n    },\n    \"dependencies\": {\n        \"globby\": \"^11.0.3\",\n        \"json5\": \"^2.2.0\"\n    },\n    \"private\": false,\n    \"bin\": {\n        \"inprint\": \"./bin/index.js\"\n    },\n    \"files\": [\n        \".gitignore\",\n        \"package.json\",\n        \"LICENSE\",\n        \"bin/**/*.js\",\n        \"lib/**/*.js\",\n        \"readme.md\"\n    ],\n    \"plainDependencies\": true,\n    \"prettier\": {\n        \"tabWidth\": 4,\n        \"printWidth\": 120,\n        \"trailingComma\": \"es5\"\n    },\n    \"husky\": {\n        \"hooks\": {\n            \"pre-commit\": \"pretty-quick --staged\"\n        }\n    }\n}"
}